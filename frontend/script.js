// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentUser = null;

var lala = new Audio("./sounds/gunshot-mem-short.mp3")
var lala_eagle = new Audio("./sounds/eagle.mp3")

// –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
const ADMIN_USERS = ['admin', 'manager', 'root', 'boss']; // –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –ª–æ–≥–∏–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

function showSection(name){
  document.getElementById('section-tours').classList.toggle('hidden', name!=='tours');
  document.getElementById('section-bookings').classList.toggle('hidden', name!=='bookings');
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function toggleAuthModal() {
  const modal = document.getElementById('auth-modal');
  modal.classList.toggle('hidden');
}

function closeAuthModal() {
  document.getElementById('auth-modal').classList.add('hidden');
  // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—ã
  document.getElementById('login-form').reset();
  document.getElementById('register-form').reset();
  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
  document.getElementById('login-status').textContent = '';
  document.getElementById('register-status').textContent = '';
}

function switchAuthTab(tab) {
  // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —Ç–∞–±–æ–≤
  document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
  document.querySelectorAll('.auth-tab').forEach(tab => tab.classList.remove('active'));
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∞–±—É
  if (tab === 'login') {
    document.querySelector('.tab-btn:first-child').classList.add('active');
    document.getElementById('login-tab').classList.add('active');
  } else {
    document.querySelector('.tab-btn:last-child').classList.add('active');
    document.getElementById('register-tab').classList.add('active');
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
function setToken(token){
  if(token){ 
    localStorage.setItem('token', token); 
    updateAuthState(true);
  } else { 
    localStorage.removeItem('token'); 
    updateAuthState(false);
  }
}

function getToken(){ 
  return localStorage.getItem('token'); 
}

function authHeader(){
  const t = getToken();
  return t ? { Authorization: `Bearer ${t}` } : {};
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 401 –æ—à–∏–±–æ–∫
function handleUnauthorized() {
  console.log('–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
  setToken(null);
  updateAuthState(false);
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function isAdmin() {
  const isAdminUser = currentUser && ADMIN_USERS.includes(currentUser.username);
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', {
    currentUser: currentUser?.username,
    isAdmin: isAdminUser,
    adminUsers: ADMIN_USERS
  });
  return isAdminUser;
}

function updateAuthState(isAuthenticated) {
  const authBtn = document.getElementById('auth-btn');
  const logoutBtn = document.getElementById('logout-btn');
  const userDisplay = document.getElementById('user-display');
  const bookingsNav = document.getElementById('bookings-nav');
  const adminSection = document.getElementById('admin-section');
  
  if (isAuthenticated) {
    authBtn.classList.add('hidden');
    logoutBtn.classList.remove('hidden');
    userDisplay.classList.remove('hidden');
    bookingsNav.classList.add('authenticated');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if (isAdmin()) {
      console.log('üëë –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
      adminSection.classList.remove('hidden');
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞
      const createButton = document.getElementById('create-tour-button');
      if (createButton) {
        createButton.style.display = 'block';
      }
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      loadUsers();
    } else {
      console.log('üë§ –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
      adminSection.classList.add('hidden');
      // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞
      const createButton = document.getElementById('create-tour-button');
      if (createButton) {
        createButton.style.display = 'none';
      }
    }
    
    loadCurrentUser();
    // loadTours() –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –≤ loadCurrentUser() –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  } else {
    authBtn.classList.remove('hidden');
    logoutBtn.classList.add('hidden');
    userDisplay.classList.add('hidden');
    bookingsNav.classList.remove('authenticated');
    adminSection.classList.add('hidden');
    currentUser = null;
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—É—Ä—ã –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    loadTours();
  }
}

async function loadCurrentUser() {
  try {
    console.log('üë§ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const res = await fetch('/api/auth/users/me', { headers: authHeader() });
    console.log('Response status:', res.status);
    
    if (res.ok) {
      const userData = await res.json();
      console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
      currentUser = userData;
      const usernameDisplay = document.getElementById('username-display');
      const userDisplay = document.getElementById('user-display');
      const adminSection = document.getElementById('admin-section');
      
      usernameDisplay.textContent = userData.username || userData.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      if (isAdmin()) {
        userDisplay.classList.add('admin');
        adminSection.classList.remove('hidden');
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞
        const createButton = document.getElementById('create-tour-button');
        if (createButton) {
          createButton.style.display = 'block';
        }
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        loadUsers();
      } else {
        userDisplay.classList.remove('admin');
        adminSection.classList.add('hidden');
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞
        const createButton = document.getElementById('create-tour-button');
        if (createButton) {
          createButton.style.display = 'none';
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—É—Ä—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      loadTours();
    } else if (res.status === 401) {
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ (401), –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
      handleUnauthorized();
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  }
}

async function loadTours(){
  try {
  const dest = document.getElementById('filter-destination').value.trim();
  const url = dest ? `/api/tours/tours?destination=${encodeURIComponent(dest)}` : `/api/tours/tours`;
    // GET /tours –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø–æ—ç—Ç–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    const res = await fetch(url);
    
    if (!res.ok) {
      throw new Error(`HTTP ${res.status}: ${res.statusText}`);
    }
    
  const data = await res.json();
  const root = document.getElementById('tours-list');
    const isAuthenticated = !!getToken();
    const isAdminUser = isAdmin();
    
    console.log('üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—É—Ä–æ–≤:', {
      isAuthenticated,
      isAdminUser,
      currentUser: currentUser?.username,
      adminUsers: ADMIN_USERS
    });
    
  root.innerHTML = data.map(t => {
    console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—É—Ä ${t.id}:`, {
      title: t.title,
      isAdminUser,
      isAuthenticated
    });
    
    return `<div class="card">
        <h4>${escapeHtml(t.title)}</h4>
        <div class="destination">üìç ${escapeHtml(t.destination)}</div>
        ${t.description ? `<div class="description">${escapeHtml(t.description)}</div>` : ''}
        <div class="price">${t.price} ‚ÇΩ</div>
        <div class="duration">‚è±Ô∏è ${t.duration_days} –¥–Ω–µ–π</div>
        <div class="available ${t.available ? 'true' : 'false'}">
          ${t.available ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        </div>
        ${t.features && t.features.length > 0 ? 
          `<div class="features">${t.features.map(f => `‚Ä¢ ${escapeHtml(f)}`).join('<br>')}</div>` : 
          ''
        }
        <div class="card-actions">
          <button class="book-btn" onclick="bookTour(${t.id})" ${!t.available || !isAuthenticated ? 'disabled' : ''}>
            ${!isAuthenticated ? 'üîí –í–æ–π–¥–∏—Ç–µ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' : !t.available ? '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω' : 'üéØ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å'}
          </button>
          ${isAdminUser ? `
            <div class="admin-actions">
              <button class="edit-btn" onclick="editTour(${t.id})">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
              <button class="delete-btn" onclick="deleteTour(${t.id})">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
            </div>
          ` : ''}
        </div>
    </div>`;
  }).join('');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–æ–≤:', error);
    document.getElementById('tours-list').innerHTML = `<div class="card error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–æ–≤: ${escapeHtml(error.message)}</div>`;
  }
}

// –§—É–Ω–∫—Ü–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—É—Ä–∞ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫
async function bookTour(tourId) {
  lala.play();
  if (!getToken()) {
    toggleAuthModal();
    return;
  }
  
  if (!currentUser) {
    // –£–±–∏—Ä–∞–µ–º alert –¥–ª—è localhost
    if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
      alert('–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ.');
    }
    return;
  }
  
  if (!currentUser.id) {
    console.error('currentUser:', currentUser);
    // –£–±–∏—Ä–∞–µ–º alert –¥–ª—è localhost
    if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
      alert('–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ.');
    }
    return;
  }
  
  try {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–∞:', tourId);
    console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', currentUser);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–µ
    const tourRes = await fetch(`/api/tours/tours/${tourId}`, { headers: authHeader() });
    if (!tourRes.ok) {
      throw new Error(`–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: HTTP ${tourRes.status}`);
    }
    const tour = await tourRes.json();
    console.log('–î–∞–Ω–Ω—ã–µ —Ç—É—Ä–∞:', tour);
    
    // –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const bookingPayload = {
      title: tour.title,
      user_id: currentUser.id,
      tour_id: parseInt(tourId),
      participants_count: 1,
      travel_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
      contact_phone: currentUser.phone || '',
      contact_email: currentUser.email || '',
      special_requests: null
    };
    
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', bookingPayload);
    
    const res = await fetch('/api/bookings/bookings', { 
      method: 'POST', 
      headers: {...{'Content-Type': 'application/json'}, ...authHeader()}, 
      body: JSON.stringify(bookingPayload)
    });
    
    console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', res.status, res.statusText);
    
    if (!res.ok) {
      const errorData = await res.json().catch(() => ({ detail: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' }));
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', errorData);
      throw new Error(errorData.detail || `HTTP ${res.status}: ${res.statusText}`);
    }
    
    const bookingResult = await res.json();
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', bookingResult);
    
    // –£–±–∏—Ä–∞–µ–º alert –¥–ª—è localhost
    if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
      alert(`‚úÖ –¢—É—Ä "${tour.title}" —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!`);
    } else {
      console.log(`‚úÖ –¢—É—Ä "${tour.title}" —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!`);
    }
    loadTours(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–æ–≤
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    // –£–±–∏—Ä–∞–µ–º alert –¥–ª—è localhost
    if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
      alert(`‚ùå –û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—É—Ä–∞
async function handleTourForm(e){
  e.preventDefault();
  try {
    console.log('üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Ç—É—Ä–∞...');
  const form = e.target;
    const tourId = document.getElementById('tour-id').value;
    console.log('Tour ID:', tourId);
    
  const features = (form.features.value || '').split(',').map(s=>s.trim()).filter(Boolean);
  const payload = {
    title: form.title.value,
    destination: form.destination.value,
    price: Number(form.price.value),
    duration_days: Number(form.duration_days.value),
    description: form.description.value || null,
    features: features.length? features : null,
    available: true
  };
    
    console.log('Payload:', payload);
    
    let res;
    if (tourId) {
      // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—É—Ä–∞
      console.log('üîÑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–∞:', tourId);
      console.log('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser);
      console.log('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', getToken() ? '–ï—Å—Ç—å' : '–ù–µ—Ç');
      console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', {...{'Content-Type': 'application/json'}, ...authHeader()});
      res = await fetch(`/api/tours/tours/${tourId}`, { 
        method: 'PUT', 
        headers: {...{'Content-Type': 'application/json'}, ...authHeader()}, 
        body: JSON.stringify(payload)
      });
    } else {
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–∞
      console.log('‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–∞');
      console.log('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser);
      console.log('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', getToken() ? '–ï—Å—Ç—å' : '–ù–µ—Ç');
      res = await fetch('/api/tours/tours', { 
        method: 'POST', 
        headers: {...{'Content-Type': 'application/json'}, ...authHeader()}, 
        body: JSON.stringify(payload)
      });
    }
    
    console.log('Response status:', res.status);
    
    if (!res.ok) {
      let errorData;
      try {
        errorData = await res.json();
      } catch (jsonError) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞:', jsonError);
        errorData = { detail: `HTTP ${res.status}: ${res.statusText}` };
      }
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—É—Ä–∞:', errorData);
      console.error('Response status:', res.status);
      console.error('Response statusText:', res.statusText);
      throw new Error(errorData.detail || `HTTP ${res.status}: ${res.statusText}`);
    }
    
    const statusText = tourId ? '–¢—É—Ä –æ–±–Ω–æ–≤–ª–µ–Ω' : '–¢—É—Ä —Å–æ–∑–¥–∞–Ω';
    document.getElementById('admin-tour-status').textContent = `‚úÖ ${statusText}`;
    document.getElementById('admin-tour-status').className = 'status success';
    
    form.reset();
    document.getElementById('tour-id').value = '';
    resetTourForm();
    loadTours();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—É—Ä–∞:', error);
    document.getElementById('admin-tour-status').textContent = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
    document.getElementById('admin-tour-status').className = 'status error';
  }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–∞
async function editTour(tourId) {
  lala_eagle.play();
  try {
    console.log('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–∞:', tourId);
    const res = await fetch(`/api/tours/tours/${tourId}`, { headers: authHeader() });
    console.log('Response status:', res.status);
    
    if (!res.ok) {
      const errorData = await res.json().catch(() => ({ detail: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' }));
      throw new Error(errorData.detail || '–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const tour = await res.json();
    console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ç—É—Ä:', tour);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ —Ç—É—Ä–∞
    document.getElementById('tour-id').value = tour.id;
    document.querySelector('input[name="title"]').value = tour.title || '';
    document.querySelector('input[name="destination"]').value = tour.destination || '';
    document.querySelector('input[name="price"]').value = tour.price || '';
    document.querySelector('input[name="duration_days"]').value = tour.duration_days || '';
    document.querySelector('textarea[name="description"]').value = tour.description || '';
    document.querySelector('input[name="features"]').value = tour.features ? tour.features.join(', ') : '';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ñ–æ—Ä–º—ã
    document.getElementById('admin-form-title').textContent = '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä';
    document.getElementById('submit-tour-btn').textContent = '–û–±–Ω–æ–≤–∏—Ç—å —Ç—É—Ä';
    document.getElementById('cancel-edit-btn').classList.remove('hidden');
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ñ–æ—Ä–º–µ
    document.getElementById('admin-section').scrollIntoView({ behavior: 'smooth' });
    
    console.log('‚úÖ –§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    // –£–±–∏—Ä–∞–µ–º alert –¥–ª—è localhost
    if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
      alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–∞
async function deleteTour(tourId) {
  console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–∞:', tourId);
  
  // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è localhost
  if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç—É—Ä?')) {
      return;
    }
  }
  
  try {
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ...');
    const res = await fetch(`/api/tours/tours/${tourId}`, { 
      method: 'DELETE', 
      headers: authHeader() 
    });
    
    console.log('Response status:', res.status);
    
    if (!res.ok) {
      const errorData = await res.json().catch(() => ({ detail: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' }));
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', errorData);
      throw new Error(errorData.detail || `HTTP ${res.status}`);
    }
    
    // –£–±–∏—Ä–∞–µ–º alert –¥–ª—è localhost
    if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
      alert('‚úÖ –¢—É—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
    } else {
      console.log('‚úÖ –¢—É—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
    }
    loadTours();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—É—Ä–∞:', error);
    // –£–±–∏—Ä–∞–µ–º alert –¥–ª—è localhost
    if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
      alert(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error.message}`);
    }
  }
}

// –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function cancelEditTour() {
  resetTourForm();
}

// –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é —Å–æ–∑–¥–∞–Ω–∏—è
function resetTourForm() {
  document.getElementById('admin-form-title').textContent = '‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç—É—Ä';
  document.getElementById('submit-tour-btn').textContent = '–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä';
  document.getElementById('cancel-edit-btn').classList.add('hidden');
  document.getElementById('tour-id').value = '';
  document.getElementById('admin-tour-status').textContent = '';
  document.getElementById('admin-tour-status').className = 'status';
}

async function loadBookings(){
  if (!getToken()) {
    document.getElementById('bookings-list').innerHTML = '<div class="card error">üîí –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π</div>';
    return;
  }
  
  try {
    const url = `/api/bookings/bookings/user/${currentUser.id}`;
    console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', currentUser.id);
    console.log('URL:', url);
    console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏:', authHeader());
    
    const res = await fetch(url, { headers: authHeader() });
    
    if (!res.ok) {
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ (401), –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
      if (res.status === 401) {
        handleUnauthorized();
        document.getElementById('bookings-list').innerHTML = '<div class="card error">üîí –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.</div>';
        return;
      }
      throw new Error(`HTTP ${res.status}: ${res.statusText}`);
    }
    
  const data = await res.json();
  const root = document.getElementById('bookings-list');
    
    if (data.length === 0) {
      root.innerHTML = '<div class="card">üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π</div>';
      return;
    }
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ
    const activeBookings = data.filter(b => b.status !== 'cancelled');
    const cancelledBookings = data.filter(b => b.status === 'cancelled');
    
    let html = '';
    
    // –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if (activeBookings.length > 0) {
      html += `
        <div class="bookings-section">
          <h3>üìã –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
          <div class="bookings-grid">
            ${activeBookings.map(b => createBookingCard(b)).join('')}
          </div>
        </div>
      `;
    }
    
    // –û—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if (cancelledBookings.length > 0) {
      html += `
        <div class="bookings-section">
          <h3>‚ùå –û—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
          <div class="bookings-grid cancelled">
            ${cancelledBookings.map(b => createBookingCard(b)).join('')}
          </div>
        </div>
      `;
    }
    
    if (activeBookings.length === 0 && cancelledBookings.length === 0) {
      html = '<div class="card">üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π</div>';
    }
    
    root.innerHTML = html;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error);
    document.getElementById('bookings-list').innerHTML = `<div class="card error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: ${escapeHtml(error.message)}</div>`;
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
function createBookingCard(b) {
  return `
    <div class="card booking-card ${b.status}">
      <h4>üé´ –ë—Ä–æ–Ω—å #${b.id}</h4>
      <div class="booking-info">
        <div>üè® –¢—É—Ä: ${b.title}</div>
        <div>üìÖ –î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏: ${new Date(b.travel_date).toLocaleDateString('ru-RU')}</div>
        <div>üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${b.participants_count}</div>
        <div class="price">üí∞ –°—É–º–º–∞: ${b.total_price} ‚ÇΩ</div>
        <div class="status">
          <span class="status-badge ${b.status}">${getStatusText(b.status)}</span>
          <span class="payment-badge ${b.payment_status}">${getPaymentText(b.payment_status)}</span>
        </div>
      </div>
      <div class="booking-actions">
        ${b.status==='pending' ? `<button class="confirm-btn" onclick="confirmBooking(${b.id})">‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>`:''}
        ${b.status!=='cancelled' && b.status!=='completed' ? `<button class="cancel-btn" onclick="cancelBooking(${b.id})">‚ùå –û—Ç–º–µ–Ω–∏—Ç—å</button>`:''}
      </div>
    </div>
  `;
}

function getStatusText(status) {
  const statusMap = {
    'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç',
    'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
    'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ',
    'completed': 'üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ'
  };
  return statusMap[status] || status;
}

function getPaymentText(status) {
  const paymentMap = {
    'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
    'paid': '‚úÖ –û–ø–ª–∞—á–µ–Ω–æ',
    'refunded': 'üí∏ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ'
  };
  return paymentMap[status] || status;
}


async function cancelBooking(id){
  try {
    const res = await fetch(`/api/bookings/bookings/${id}/cancel`, { method:'PUT', headers: authHeader() });
    if (!res.ok) {
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ (401), –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
      if (res.status === 401) {
        handleUnauthorized();
        return;
      }
      const errorData = await res.json().catch(() => ({ detail: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' }));
      throw new Error(errorData.detail || `HTTP ${res.status}`);
    }
  loadBookings();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    // –£–±–∏—Ä–∞–µ–º alert –¥–ª—è localhost
    if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
      alert(`–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
    }
  }
}

async function confirmBooking(id){
  try {
    const res = await fetch(`/api/bookings/bookings/${id}/confirm`, { method:'POST', headers: authHeader() });
    if (!res.ok) {
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ (401), –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
      if (res.status === 401) {
        handleUnauthorized();
        return;
      }
      const errorData = await res.json().catch(() => ({ detail: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' }));
      throw new Error(errorData.detail || `HTTP ${res.status}`);
    }
  loadBookings();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    // –£–±–∏—Ä–∞–µ–º alert –¥–ª—è localhost
    if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
      alert(`–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
    }
  }
}

function escapeHtml(s){
  return String(s).replace(/[&<>"]/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;'}[c]));
}

// –§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function login(e){
  e.preventDefault();
  try {
  const form = e.target;
  const payload = { username: form.username.value, password: form.password.value };
  const res = await fetch('/api/auth/login', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(payload)});
    
    if (!res.ok) {
      const errorData = await res.json().catch(() => ({ detail: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' }));
      throw new Error(errorData.detail || `HTTP ${res.status}`);
    }
    
  const data = await res.json();
    if (data.access_token) {
      setToken(data.access_token);
      document.getElementById('login-status').textContent = '‚úÖ –£—Å–ø–µ—à–Ω–æ!';
      document.getElementById('login-status').className = 'status success';
      form.reset();
      closeAuthModal();
    } else {
      throw new Error('–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
    document.getElementById('login-status').textContent = `‚ùå ${error.message}`;
    document.getElementById('login-status').className = 'status error';
  }
}

async function registerUser(e){
  e.preventDefault();
  try {
  const form = e.target;
  const payload = { 
    username: form.username.value,
    password: form.password.value,
    email: form.email.value,
    name: form.name.value,
    phone: form.phone.value || null
  };
  const res = await fetch('/api/auth/users', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(payload)});
    
    if (!res.ok) {
      const errorData = await res.json().catch(() => ({ detail: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' }));
      throw new Error(errorData.detail || `HTTP ${res.status}`);
    }
    
    document.getElementById('register-status').textContent = '‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω!';
    document.getElementById('register-status').className = 'status success';
    form.reset();
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –≤—Ö–æ–¥–∞
    switchAuthTab('login');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    document.getElementById('register-status').textContent = `‚ùå ${error.message}`;
    document.getElementById('register-status').className = 'status error';
  }
}

function logout(){ 
  setToken(null); 
  showSection('tours'); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç—É—Ä—ã
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—É—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
async function createTestTour() {
  try {
    const testTour = {
      title: "–¢–µ—Å—Ç–æ–≤—ã–π —Ç—É—Ä –≤ –ê–Ω—Ç–∞–ª—å—é",
      destination: "–ê–Ω—Ç–∞–ª—å—è",
      price: 50000,
      duration_days: 7,
      description: "–û—Ç–ª–∏—á–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—É—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞",
      features: ["–í—Å—ë –≤–∫–ª—é—á–µ–Ω–æ", "–≠–∫—Å–∫—É—Ä—Å–∏–∏", "–¢—Ä–∞–Ω—Å—Ñ–µ—Ä"],
      available: true
    };
    
    const res = await fetch('/api/tours/tours', { 
      method: 'POST', 
      headers: {...{'Content-Type': 'application/json'}, ...authHeader()}, 
      body: JSON.stringify(testTour)
    });
    
    if (res.ok) {
      console.log('–¢–µ—Å—Ç–æ–≤—ã–π —Ç—É—Ä —Å–æ–∑–¥–∞–Ω');
      loadTours();
    } else {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—É—Ä–∞:', res.status);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—É—Ä–∞:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞
function showCreateTourForm() {
  console.log('üìù –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞');
  console.log('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser);
  console.log('–¢–æ–∫–µ–Ω:', !!getToken());
  console.log('–Ø–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º:', isAdmin());
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  if (!getToken()) {
    // –£–±–∏—Ä–∞–µ–º alert –¥–ª—è localhost
    if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
      alert('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞');
    }
    toggleAuthModal();
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  if (!isAdmin()) {
    // –£–±–∏—Ä–∞–µ–º alert –¥–ª—è localhost
    if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
      alert('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç—É—Ä—ã');
    }
    return;
  }
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
  resetTourForm();
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const adminSection = document.getElementById('admin-section');
  adminSection.classList.remove('hidden');
  
  // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ñ–æ—Ä–º–µ
  adminSection.scrollIntoView({ behavior: 'smooth' });
  
  console.log('‚úÖ –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–∞');
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
async function loadUsers() {
  if (!getToken()) {
    document.getElementById('users-list').innerHTML = '<div class="card error">üîí –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É</div>';
    return;
  }
  
  if (!isAdmin()) {
    document.getElementById('users-list').innerHTML = '<div class="card error">‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</div>';
    return;
  }
  
  try {
    const res = await fetch('/api/auth/users', { headers: authHeader() });
    
    if (!res.ok) {
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ (401), –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
      if (res.status === 401) {
        handleUnauthorized();
        document.getElementById('users-list').innerHTML = '<div class="card error">üîí –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.</div>';
        return;
      }
      throw new Error(`HTTP ${res.status}: ${res.statusText}`);
    }
    
    const users = await res.json();
    const root = document.getElementById('users-list');
    
    if (users.length === 0) {
      root.innerHTML = '<div class="card">üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
      return;
    }
    
    root.innerHTML = users.map(user => createUserCard(user)).join('');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    document.getElementById('users-list').innerHTML = `<div class="card error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${escapeHtml(error.message)}</div>`;
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function createUserCard(user) {
  const isCurrentUser = currentUser && user.id === currentUser.id;
  const isAdminUser = ADMIN_USERS.includes(user.username);
  
  return `
    <div class="card user-card ${isCurrentUser ? 'current-user' : ''}">
      <h4>üë§ ${escapeHtml(user.username)} ${isCurrentUser ? '(–í—ã)' : ''}</h4>
      <div class="user-info">
        <div>üìß ${escapeHtml(user.email)}</div>
        <div>üëã ${escapeHtml(user.name)}</div>
        ${user.phone ? `<div>üì± ${escapeHtml(user.phone)}</div>` : ''}
        <div class="user-meta">
          <span class="user-id">ID: ${user.id}</span>
          ${isAdminUser ? '<span class="admin-badge">üëë –ê–¥–º–∏–Ω</span>' : ''}
        </div>
      </div>
      <div class="user-actions">
        ${!isCurrentUser && !isAdminUser ? `
          <button class="delete-btn" onclick="deleteUser(${user.id}, '${escapeHtml(user.username)}')">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
        ` : ''}
        ${isCurrentUser ? '<span class="current-user-text">–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</span>' : ''}
        ${isAdminUser && !isCurrentUser ? '<span class="admin-protected">–ó–∞—â–∏—â–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç</span>' : ''}
      </div>
    </div>
  `;
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function deleteUser(userId, username) {
  console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId, username);
  
  // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è localhost
  if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${username}"?`)) {
      return;
    }
  }
  
  try {
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const res = await fetch(`/api/auth/users/${userId}`, { 
      method: 'DELETE', 
      headers: authHeader() 
    });
    
    console.log('Response status:', res.status);
    
    if (!res.ok) {
      const errorData = await res.json().catch(() => ({ detail: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' }));
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', errorData);
      throw new Error(errorData.detail || `HTTP ${res.status}`);
    }
    
    // –£–±–∏—Ä–∞–µ–º alert –¥–ª—è localhost
    if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
      alert(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${username}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!`);
    } else {
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${username}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!`);
    }
    loadUsers(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    // –£–±–∏—Ä–∞–µ–º alert –¥–ª—è localhost
    if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
      alert(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error.message}`);
    }
  }
}


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  const token = getToken();
  if (token) {
    updateAuthState(true);
  } else {
    updateAuthState(false);
  }
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä—ã
  loadTours();
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
  document.getElementById('auth-modal').addEventListener('click', function(e) {
    if (e.target === this) {
      closeAuthModal();
    }
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è localhost)
  if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
    // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—É—Ä–∞
    const testButton = document.createElement('button');
    testButton.textContent = '–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—É—Ä';
    testButton.onclick = createTestTour;
    testButton.style.cssText = 'position: fixed; bottom: 20px; right: 20px; z-index: 9999; background: #dc3545; color: white; padding: 10px 15px; border: none; border-radius: 8px; font-size: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.2);';
    document.body.appendChild(testButton);
    
    // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    const createButton = document.createElement('button');
    createButton.textContent = '–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä';
    createButton.onclick = showCreateTourForm;
    createButton.style.cssText = 'position: fixed; bottom: 20px; right: 180px; z-index: 9999; background: #28a745; color: white; padding: 10px 15px; border: none; border-radius: 8px; font-size: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.2);';
    createButton.id = 'create-tour-button';
    document.body.appendChild(createButton);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    createButton.style.display = 'none';
  }
});


