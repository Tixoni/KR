[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\auth-service\requirements.txt]
[–†–∞–∑–º–µ—Ä: 189 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-21 13:35:43.013997]

fastapi==0.104.1
uvicorn==0.24.0
sqlalchemy==2.0.23
psycopg2-binary==2.9.9
python-dotenv==1.0.0
bcrypt==4.0.1
python-jose[cryptography]==3.3.0
email-validator==2.1.0
python-multipart==0.0.6
-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\booking-service\requirements.txt]
[–†–∞–∑–º–µ—Ä: 158 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-21 13:35:43.114161]

fastapi==0.104.1
uvicorn==0.24.0
sqlalchemy==2.0.23
psycopg2-binary==2.9.9
python-dotenv==1.0.0
pydantic==2.5.0
python-jose[cryptography]==3.3.0
httpx==0.25.2
-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\tours-service\requirements.txt]
[–†–∞–∑–º–µ—Ä: 128 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-21 13:35:43.231774]

fastapi==0.104.1
uvicorn==0.24.0
sqlalchemy==2.0.23
psycopg2-binary==2.9.9
python-dotenv==1.0.0
python-jose[cryptography]==3.3.0
-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\frontend\script.js]
[–†–∞–∑–º–µ—Ä: 38809 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-24 13:29:41.008735]

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentUser = null;

var lala = new Audio("./sounds/gunshot-mem-short.mp3")
var lala_eagle = new Audio("./sounds/eagle.mp3")

// –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
const ADMIN_USERS = ['admin', 'manager', 'root', 'boss']; // –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –ª–æ–≥–∏–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

function showSection(name){
  document.getElementById('section-tours').classList.toggle('hidden', name!=='tours');
  document.getElementById('section-bookings').classList.toggle('hidden', name!=='bookings');
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function toggleAuthModal() {
  const modal = document.getElementById('auth-modal');
  modal.classList.toggle('hidden');
}

function closeAuthModal() {
  document.getElementById('auth-modal').classList.add('hidden');
  // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—ã
  document.getElementById('login-form').reset();
  document.getElementById('register-form').reset();
  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
  document.getElementById('login-status').textContent = '';
  document.getElementById('register-status').textContent = '';
}

function switchAuthTab(tab) {
  // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —Ç–∞–±–æ–≤
  document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
  document.querySelectorAll('.auth-tab').forEach(tab => tab.classList.remove('active'));
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∞–±—É
  if (tab === 'login') {
    document.querySelector('.tab-btn:first-child').classList.add('active');
    document.getElementById('login-tab').classList.add('active');
  } else {
    document.querySelector('.tab-btn:last-child').classList.add('active');
    document.getElementById('register-tab').classList.add('active');
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
function setToken(token){
  if(token){ 
    localStorage.setItem('token', token); 
    updateAuthState(true);
  } else { 
    localStorage.removeItem('token'); 
    updateAuthState(false);
  }
}

function getToken(){ 
  return localStorage.getItem('token'); 
}

function authHeader(){
  const t = getToken();
  return t ? { Authorization: `Bearer ${t}` } : {};
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 401 –æ—à–∏–±–æ–∫
function handleUnauthorized() {
  console.log('–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
  setToken(null);
  updateAuthState(false);
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function isAdmin() {
  const isAdminUser = currentUser && ADMIN_USERS.includes(currentUser.username);
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', {
    currentUser: currentUser?.username,
    isAdmin: isAdminUser,
    adminUsers: ADMIN_USERS
  });
  return isAdminUser;
}

function updateAuthState(isAuthenticated) {
  const authBtn = document.getElementById('auth-btn');
  const logoutBtn = document.getElementById('logout-btn');
  const userDisplay = document.getElementById('user-display');
  const bookingsNav = document.getElementById('bookings-nav');
  const adminSection = document.getElementById('admin-section');
  
  if (isAuthenticated) {
    authBtn.classList.add('hidden');
    logoutBtn.classList.remove('hidden');
    userDisplay.classList.remove('hidden');
    bookingsNav.classList.add('authenticated');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if (isAdmin()) {
      console.log('üëë –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
      adminSection.classList.remove('hidden');
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞
      const createButton = document.getElementById('create-tour-button');
      if (createButton) {
        createButton.style.display = 'block';
      }
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      loadUsers();
    } else {
      console.log('üë§ –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
      adminSection.classList.add('hidden');
      // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞
      const createButton = document.getElementById('create-tour-button');
      if (createButton) {
        createButton.style.display = 'none';
      }
    }
    
    loadCurrentUser();
    // loadTours() –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –≤ loadCurrentUser() –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  } else {
    authBtn.classList.remove('hidden');
    logoutBtn.classList.add('hidden');
    userDisplay.classList.add('hidden');
    bookingsNav.classList.remove('authenticated');
    adminSection.classList.add('hidden');
    currentUser = null;
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—É—Ä—ã –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    loadTours();
  }
}

async function loadCurrentUser() {
  try {
    console.log('üë§ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const res = await fetch('/api/auth/users/me', { headers: authHeader() });
    console.log('Response status:', res.status);
    
    if (res.ok) {
      const userData = await res.json();
      console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
      currentUser = userData;
      const usernameDisplay = document.getElementById('username-display');
      const userDisplay = document.getElementById('user-display');
      const adminSection = document.getElementById('admin-section');
      
      usernameDisplay.textContent = userData.username || userData.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      if (isAdmin()) {
        userDisplay.classList.add('admin');
        adminSection.classList.remove('hidden');
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞
        const createButton = document.getElementById('create-tour-button');
        if (createButton) {
          createButton.style.display = 'block';
        }
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        loadUsers();
      } else {
        userDisplay.classList.remove('admin');
        adminSection.classList.add('hidden');
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞
        const createButton = document.getElementById('create-tour-button');
        if (createButton) {
          createButton.style.display = 'none';
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—É—Ä—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      loadTours();
    } else if (res.status === 401) {
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ (401), –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
      handleUnauthorized();
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  }
}

async function loadTours(){
  try {
  const dest = document.getElementById('filter-destination').value.trim();
  const url = dest ? `/api/tours/tours?destination=${encodeURIComponent(dest)}` : `/api/tours/tours`;
    // GET /tours –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø–æ—ç—Ç–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    const res = await fetch(url);
    
    if (!res.ok) {
      throw new Error(`HTTP ${res.status}: ${res.statusText}`);
    }
    
  const data = await res.json();
  const root = document.getElementById('tours-list');
    const isAuthenticated = !!getToken();
    const isAdminUser = isAdmin();
    
    console.log('üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—É—Ä–æ–≤:', {
      isAuthenticated,
      isAdminUser,
      currentUser: currentUser?.username,
      adminUsers: ADMIN_USERS
    });
    
  root.innerHTML = data.map(t => {
    console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—É—Ä ${t.id}:`, {
      title: t.title,
      isAdminUser,
      isAuthenticated
    });
    
    return `<div class="card">
        <h4>${escapeHtml(t.title)}</h4>
        <div class="destination">üìç ${escapeHtml(t.destination)}</div>
        ${t.description ? `<div class="description">${escapeHtml(t.description)}</div>` : ''}
        <div class="price">${t.price} ‚ÇΩ</div>
        <div class="duration">‚è±Ô∏è ${t.duration_days} –¥–Ω–µ–π</div>
        <div class="available ${t.available ? 'true' : 'false'}">
          ${t.available ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        </div>
        ${t.features && t.features.length > 0 ? 
          `<div class="features">${t.features.map(f => `‚Ä¢ ${escapeHtml(f)}`).join('<br>')}</div>` : 
          ''
        }
        <div class="card-actions">
          <button class="book-btn" onclick="bookTour(${t.id})" ${!t.available || !isAuthenticated ? 'disabled' : ''}>
            ${!isAuthenticated ? 'üîí –í–æ–π–¥–∏—Ç–µ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' : !t.available ? '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω' : 'üéØ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å'}
          </button>
          ${isAdminUser ? `
            <div class="admin-actions">
              <button class="edit-btn" onclick="editTour(${t.id})">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
              <button class="delete-btn" onclick="deleteTour(${t.id})">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
            </div>
          ` : ''}
        </div>
    </div>`;
  }).join('');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–æ–≤:', error);
    document.getElementById('tours-list').innerHTML = `<div class="card error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–æ–≤: ${escapeHtml(error.message)}</div>`;
  }
}

// –§—É–Ω–∫—Ü–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—É—Ä–∞ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫
async function bookTour(tourId) {
  lala.play();
  if (!getToken()) {
    toggleAuthModal();
    return;
  }
  
  if (!currentUser) {
    // –£–±–∏—Ä–∞–µ–º alert –¥–ª—è localhost
    if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
      alert('–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ.');
    }
    return;
  }
  
  if (!currentUser.id) {
    console.error('currentUser:', currentUser);
    // –£–±–∏—Ä–∞–µ–º alert –¥–ª—è localhost
    if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
      alert('–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ.');
    }
    return;
  }
  
  try {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–∞:', tourId);
    console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', currentUser);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–µ
    const tourRes = await fetch(`/api/tours/tours/${tourId}`, { headers: authHeader() });
    if (!tourRes.ok) {
      throw new Error(`–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: HTTP ${tourRes.status}`);
    }
    const tour = await tourRes.json();
    console.log('–î–∞–Ω–Ω—ã–µ —Ç—É—Ä–∞:', tour);
    
    // –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const bookingPayload = {
      title: tour.title,
      user_id: currentUser.id,
      tour_id: parseInt(tourId),
      participants_count: 1,
      travel_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
      contact_phone: currentUser.phone || '',
      contact_email: currentUser.email || '',
      special_requests: null
    };
    
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', bookingPayload);
    
    const res = await fetch('/api/bookings/bookings', { 
      method: 'POST', 
      headers: {...{'Content-Type': 'application/json'}, ...authHeader()}, 
      body: JSON.stringify(bookingPayload)
    });
    
    console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', res.status, res.statusText);
    
    if (!res.ok) {
      const errorData = await res.json().catch(() => ({ detail: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' }));
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', errorData);
      throw new Error(errorData.detail || `HTTP ${res.status}: ${res.statusText}`);
    }
    
    const bookingResult = await res.json();
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', bookingResult);
    
    // –£–±–∏—Ä–∞–µ–º alert –¥–ª—è localhost
    if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
      alert(`‚úÖ –¢—É—Ä "${tour.title}" —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!`);
    } else {
      console.log(`‚úÖ –¢—É—Ä "${tour.title}" —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!`);
    }
    loadTours(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–æ–≤
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    // –£–±–∏—Ä–∞–µ–º alert –¥–ª—è localhost
    if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
      alert(`‚ùå –û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—É—Ä–∞
async function handleTourForm(e){
  e.preventDefault();
  try {
    console.log('üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Ç—É—Ä–∞...');
  const form = e.target;
    const tourId = document.getElementById('tour-id').value;
    console.log('Tour ID:', tourId);
    
  const features = (form.features.value || '').split(',').map(s=>s.trim()).filter(Boolean);
  const payload = {
    title: form.title.value,
    destination: form.destination.value,
    price: Number(form.price.value),
    duration_days: Number(form.duration_days.value),
    description: form.description.value || null,
    features: features.length? features : null,
    available: true
  };
    
    console.log('Payload:', payload);
    
    let res;
    if (tourId) {
      // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—É—Ä–∞
      console.log('üîÑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–∞:', tourId);
      console.log('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser);
      console.log('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', getToken() ? '–ï—Å—Ç—å' : '–ù–µ—Ç');
      console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', {...{'Content-Type': 'application/json'}, ...authHeader()});
      res = await fetch(`/api/tours/tours/${tourId}`, { 
        method: 'PUT', 
        headers: {...{'Content-Type': 'application/json'}, ...authHeader()}, 
        body: JSON.stringify(payload)
      });
    } else {
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–∞
      console.log('‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–∞');
      console.log('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser);
      console.log('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', getToken() ? '–ï—Å—Ç—å' : '–ù–µ—Ç');
      res = await fetch('/api/tours/tours', { 
        method: 'POST', 
        headers: {...{'Content-Type': 'application/json'}, ...authHeader()}, 
        body: JSON.stringify(payload)
      });
    }
    
    console.log('Response status:', res.status);
    
    if (!res.ok) {
      let errorData;
      try {
        errorData = await res.json();
      } catch (jsonError) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞:', jsonError);
        errorData = { detail: `HTTP ${res.status}: ${res.statusText}` };
      }
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—É—Ä–∞:', errorData);
      console.error('Response status:', res.status);
      console.error('Response statusText:', res.statusText);
      throw new Error(errorData.detail || `HTTP ${res.status}: ${res.statusText}`);
    }
    
    const statusText = tourId ? '–¢—É—Ä –æ–±–Ω–æ–≤–ª–µ–Ω' : '–¢—É—Ä —Å–æ–∑–¥–∞–Ω';
    document.getElementById('admin-tour-status').textContent = `‚úÖ ${statusText}`;
    document.getElementById('admin-tour-status').className = 'status success';
    
    form.reset();
    document.getElementById('tour-id').value = '';
    resetTourForm();
    loadTours();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—É—Ä–∞:', error);
    document.getElementById('admin-tour-status').textContent = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
    document.getElementById('admin-tour-status').className = 'status error';
  }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–∞
async function editTour(tourId) {
  lala_eagle.play();
  try {
    console.log('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–∞:', tourId);
    const res = await fetch(`/api/tours/tours/${tourId}`, { headers: authHeader() });
    console.log('Response status:', res.status);
    
    if (!res.ok) {
      const errorData = await res.json().catch(() => ({ detail: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' }));
      throw new Error(errorData.detail || '–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const tour = await res.json();
    console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ç—É—Ä:', tour);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ —Ç—É—Ä–∞
    document.getElementById('tour-id').value = tour.id;
    document.querySelector('input[name="title"]').value = tour.title || '';
    document.querySelector('input[name="destination"]').value = tour.destination || '';
    document.querySelector('input[name="price"]').value = tour.price || '';
    document.querySelector('input[name="duration_days"]').value = tour.duration_days || '';
    document.querySelector('textarea[name="description"]').value = tour.description || '';
    document.querySelector('input[name="features"]').value = tour.features ? tour.features.join(', ') : '';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ñ–æ—Ä–º—ã
    document.getElementById('admin-form-title').textContent = '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä';
    document.getElementById('submit-tour-btn').textContent = '–û–±–Ω–æ–≤–∏—Ç—å —Ç—É—Ä';
    document.getElementById('cancel-edit-btn').classList.remove('hidden');
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ñ–æ—Ä–º–µ
    document.getElementById('admin-section').scrollIntoView({ behavior: 'smooth' });
    
    console.log('‚úÖ –§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    // –£–±–∏—Ä–∞–µ–º alert –¥–ª—è localhost
    if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
      alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–∞
async function deleteTour(tourId) {
  console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç—É—Ä–∞:', tourId);
  
  // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è localhost
  if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç—É—Ä?')) {
      return;
    }
  }
  
  try {
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ...');
    const res = await fetch(`/api/tours/tours/${tourId}`, { 
      method: 'DELETE', 
      headers: authHeader() 
    });
    
    console.log('Response status:', res.status);
    
    if (!res.ok) {
      const errorData = await res.json().catch(() => ({ detail: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' }));
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', errorData);
      throw new Error(errorData.detail || `HTTP ${res.status}`);
    }
    
    // –£–±–∏—Ä–∞–µ–º alert –¥–ª—è localhost
    if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
      alert('‚úÖ –¢—É—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
    } else {
      console.log('‚úÖ –¢—É—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
    }
    loadTours();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—É—Ä–∞:', error);
    // –£–±–∏—Ä–∞–µ–º alert –¥–ª—è localhost
    if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
      alert(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error.message}`);
    }
  }
}

// –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function cancelEditTour() {
  resetTourForm();
}

// –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é —Å–æ–∑–¥–∞–Ω–∏—è
function resetTourForm() {
  document.getElementById('admin-form-title').textContent = '‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç—É—Ä';
  document.getElementById('submit-tour-btn').textContent = '–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä';
  document.getElementById('cancel-edit-btn').classList.add('hidden');
  document.getElementById('tour-id').value = '';
  document.getElementById('admin-tour-status').textContent = '';
  document.getElementById('admin-tour-status').className = 'status';
}

async function loadBookings(){
  if (!getToken()) {
    document.getElementById('bookings-list').innerHTML = '<div class="card error">üîí –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π</div>';
    return;
  }
  
  try {
    const url = `/api/bookings/bookings/user/${currentUser.id}`;
    console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', currentUser.id);
    console.log('URL:', url);
    console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏:', authHeader());
    
    const res = await fetch(url, { headers: authHeader() });
    
    if (!res.ok) {
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ (401), –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
      if (res.status === 401) {
        handleUnauthorized();
        document.getElementById('bookings-list').innerHTML = '<div class="card error">üîí –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.</div>';
        return;
      }
      throw new Error(`HTTP ${res.status}: ${res.statusText}`);
    }
    
  const data = await res.json();
  const root = document.getElementById('bookings-list');
    
    if (data.length === 0) {
      root.innerHTML = '<div class="card">üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π</div>';
      return;
    }
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ
    const activeBookings = data.filter(b => b.status !== 'cancelled');
    const cancelledBookings = data.filter(b => b.status === 'cancelled');
    
    let html = '';
    
    // –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if (activeBookings.length > 0) {
      html += `
        <div class="bookings-section">
          <h3>üìã –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
          <div class="bookings-grid">
            ${activeBookings.map(b => createBookingCard(b)).join('')}
          </div>
        </div>
      `;
    }
    
    // –û—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if (cancelledBookings.length > 0) {
      html += `
        <div class="bookings-section">
          <h3>‚ùå –û—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
          <div class="bookings-grid cancelled">
            ${cancelledBookings.map(b => createBookingCard(b)).join('')}
          </div>
        </div>
      `;
    }
    
    if (activeBookings.length === 0 && cancelledBookings.length === 0) {
      html = '<div class="card">üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π</div>';
    }
    
    root.innerHTML = html;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error);
    document.getElementById('bookings-list').innerHTML = `<div class="card error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: ${escapeHtml(error.message)}</div>`;
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
function createBookingCard(b) {
  return `
    <div class="card booking-card ${b.status}">
      <h4>üé´ –ë—Ä–æ–Ω—å #${b.id}</h4>
      <div class="booking-info">
        <div>üè® –¢—É—Ä: ${b.title}</div>
        <div>üìÖ –î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏: ${new Date(b.travel_date).toLocaleDateString('ru-RU')}</div>
        <div>üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${b.participants_count}</div>
        <div class="price">üí∞ –°—É–º–º–∞: ${b.total_price} ‚ÇΩ</div>
        <div class="status">
          <span class="status-badge ${b.status}">${getStatusText(b.status)}</span>
          <span class="payment-badge ${b.payment_status}">${getPaymentText(b.payment_status)}</span>
        </div>
      </div>
      <div class="booking-actions">
        ${b.status==='pending' ? `<button class="confirm-btn" onclick="confirmBooking(${b.id})">‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>`:''}
        ${b.status!=='cancelled' && b.status!=='completed' ? `<button class="cancel-btn" onclick="cancelBooking(${b.id})">‚ùå –û—Ç–º–µ–Ω–∏—Ç—å</button>`:''}
      </div>
    </div>
  `;
}

function getStatusText(status) {
  const statusMap = {
    'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç',
    'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
    'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ',
    'completed': 'üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ'
  };
  return statusMap[status] || status;
}

function getPaymentText(status) {
  const paymentMap = {
    'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
    'paid': '‚úÖ –û–ø–ª–∞—á–µ–Ω–æ',
    'refunded': 'üí∏ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ'
  };
  return paymentMap[status] || status;
}


async function cancelBooking(id){
  try {
    const res = await fetch(`/api/bookings/bookings/${id}/cancel`, { method:'PUT', headers: authHeader() });
    if (!res.ok) {
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ (401), –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
      if (res.status === 401) {
        handleUnauthorized();
        return;
      }
      const errorData = await res.json().catch(() => ({ detail: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' }));
      throw new Error(errorData.detail || `HTTP ${res.status}`);
    }
  loadBookings();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    // –£–±–∏—Ä–∞–µ–º alert –¥–ª—è localhost
    if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
      alert(`–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
    }
  }
}

async function confirmBooking(id){
  try {
    const res = await fetch(`/api/bookings/bookings/${id}/confirm`, { method:'POST', headers: authHeader() });
    if (!res.ok) {
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ (401), –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
      if (res.status === 401) {
        handleUnauthorized();
        return;
      }
      const errorData = await res.json().catch(() => ({ detail: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' }));
      throw new Error(errorData.detail || `HTTP ${res.status}`);
    }
  loadBookings();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    // –£–±–∏—Ä–∞–µ–º alert –¥–ª—è localhost
    if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
      alert(`–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
    }
  }
}

function escapeHtml(s){
  return String(s).replace(/[&<>"]/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;'}[c]));
}

// –§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function login(e){
  e.preventDefault();
  try {
  const form = e.target;
  const payload = { username: form.username.value, password: form.password.value };
  const res = await fetch('/api/auth/login', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(payload)});
    
    if (!res.ok) {
      const errorData = await res.json().catch(() => ({ detail: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' }));
      throw new Error(errorData.detail || `HTTP ${res.status}`);
    }
    
  const data = await res.json();
    if (data.access_token) {
      setToken(data.access_token);
      document.getElementById('login-status').textContent = '‚úÖ –£—Å–ø–µ—à–Ω–æ!';
      document.getElementById('login-status').className = 'status success';
      form.reset();
      closeAuthModal();
    } else {
      throw new Error('–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
    document.getElementById('login-status').textContent = `‚ùå ${error.message}`;
    document.getElementById('login-status').className = 'status error';
  }
}

async function registerUser(e){
  e.preventDefault();
  try {
  const form = e.target;
  const payload = { 
    username: form.username.value,
    password: form.password.value,
    email: form.email.value,
    name: form.name.value,
    phone: form.phone.value || null
  };
  const res = await fetch('/api/auth/users', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(payload)});
    
    if (!res.ok) {
      const errorData = await res.json().catch(() => ({ detail: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' }));
      throw new Error(errorData.detail || `HTTP ${res.status}`);
    }
    
    document.getElementById('register-status').textContent = '‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω!';
    document.getElementById('register-status').className = 'status success';
    form.reset();
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –≤—Ö–æ–¥–∞
    switchAuthTab('login');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    document.getElementById('register-status').textContent = `‚ùå ${error.message}`;
    document.getElementById('register-status').className = 'status error';
  }
}

function logout(){ 
  setToken(null); 
  showSection('tours'); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç—É—Ä—ã
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—É—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
async function createTestTour() {
  try {
    const testTour = {
      title: "–¢–µ—Å—Ç–æ–≤—ã–π —Ç—É—Ä –≤ –ê–Ω—Ç–∞–ª—å—é",
      destination: "–ê–Ω—Ç–∞–ª—å—è",
      price: 50000,
      duration_days: 7,
      description: "–û—Ç–ª–∏—á–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—É—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞",
      features: ["–í—Å—ë –≤–∫–ª—é—á–µ–Ω–æ", "–≠–∫—Å–∫—É—Ä—Å–∏–∏", "–¢—Ä–∞–Ω—Å—Ñ–µ—Ä"],
      available: true
    };
    
    const res = await fetch('/api/tours/tours', { 
      method: 'POST', 
      headers: {...{'Content-Type': 'application/json'}, ...authHeader()}, 
      body: JSON.stringify(testTour)
    });
    
    if (res.ok) {
      console.log('–¢–µ—Å—Ç–æ–≤—ã–π —Ç—É—Ä —Å–æ–∑–¥–∞–Ω');
      loadTours();
    } else {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—É—Ä–∞:', res.status);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—É—Ä–∞:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞
function showCreateTourForm() {
  console.log('üìù –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞');
  console.log('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser);
  console.log('–¢–æ–∫–µ–Ω:', !!getToken());
  console.log('–Ø–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º:', isAdmin());
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  if (!getToken()) {
    // –£–±–∏—Ä–∞–µ–º alert –¥–ª—è localhost
    if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
      alert('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞');
    }
    toggleAuthModal();
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  if (!isAdmin()) {
    // –£–±–∏—Ä–∞–µ–º alert –¥–ª—è localhost
    if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
      alert('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç—É—Ä—ã');
    }
    return;
  }
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
  resetTourForm();
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const adminSection = document.getElementById('admin-section');
  adminSection.classList.remove('hidden');
  
  // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ñ–æ—Ä–º–µ
  adminSection.scrollIntoView({ behavior: 'smooth' });
  
  console.log('‚úÖ –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–∞');
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
async function loadUsers() {
  if (!getToken()) {
    document.getElementById('users-list').innerHTML = '<div class="card error">üîí –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É</div>';
    return;
  }
  
  if (!isAdmin()) {
    document.getElementById('users-list').innerHTML = '<div class="card error">‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</div>';
    return;
  }
  
  try {
    const res = await fetch('/api/auth/users', { headers: authHeader() });
    
    if (!res.ok) {
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ (401), –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
      if (res.status === 401) {
        handleUnauthorized();
        document.getElementById('users-list').innerHTML = '<div class="card error">üîí –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.</div>';
        return;
      }
      throw new Error(`HTTP ${res.status}: ${res.statusText}`);
    }
    
    const users = await res.json();
    const root = document.getElementById('users-list');
    
    if (users.length === 0) {
      root.innerHTML = '<div class="card">üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
      return;
    }
    
    root.innerHTML = users.map(user => createUserCard(user)).join('');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    document.getElementById('users-list').innerHTML = `<div class="card error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${escapeHtml(error.message)}</div>`;
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function createUserCard(user) {
  const isCurrentUser = currentUser && user.id === currentUser.id;
  const isAdminUser = ADMIN_USERS.includes(user.username);
  
  return `
    <div class="card user-card ${isCurrentUser ? 'current-user' : ''}">
      <h4>üë§ ${escapeHtml(user.username)} ${isCurrentUser ? '(–í—ã)' : ''}</h4>
      <div class="user-info">
        <div>üìß ${escapeHtml(user.email)}</div>
        <div>üëã ${escapeHtml(user.name)}</div>
        ${user.phone ? `<div>üì± ${escapeHtml(user.phone)}</div>` : ''}
        <div class="user-meta">
          <span class="user-id">ID: ${user.id}</span>
          ${isAdminUser ? '<span class="admin-badge">üëë –ê–¥–º–∏–Ω</span>' : ''}
        </div>
      </div>
      <div class="user-actions">
        ${!isCurrentUser && !isAdminUser ? `
          <button class="delete-btn" onclick="deleteUser(${user.id}, '${escapeHtml(user.username)}')">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
        ` : ''}
        ${isCurrentUser ? '<span class="current-user-text">–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</span>' : ''}
        ${isAdminUser && !isCurrentUser ? '<span class="admin-protected">–ó–∞—â–∏—â–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç</span>' : ''}
      </div>
    </div>
  `;
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function deleteUser(userId, username) {
  console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId, username);
  
  // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è localhost
  if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${username}"?`)) {
      return;
    }
  }
  
  try {
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const res = await fetch(`/api/auth/users/${userId}`, { 
      method: 'DELETE', 
      headers: authHeader() 
    });
    
    console.log('Response status:', res.status);
    
    if (!res.ok) {
      const errorData = await res.json().catch(() => ({ detail: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' }));
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', errorData);
      throw new Error(errorData.detail || `HTTP ${res.status}`);
    }
    
    // –£–±–∏—Ä–∞–µ–º alert –¥–ª—è localhost
    if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
      alert(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${username}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!`);
    } else {
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${username}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!`);
    }
    loadUsers(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    // –£–±–∏—Ä–∞–µ–º alert –¥–ª—è localhost
    if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
      alert(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error.message}`);
    }
  }
}


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  const token = getToken();
  if (token) {
    updateAuthState(true);
  } else {
    updateAuthState(false);
  }
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä—ã
  loadTours();
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
  document.getElementById('auth-modal').addEventListener('click', function(e) {
    if (e.target === this) {
      closeAuthModal();
    }
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è localhost)
  if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
    // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—É—Ä–∞
    const testButton = document.createElement('button');
    testButton.textContent = '–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—É—Ä';
    testButton.onclick = createTestTour;
    testButton.style.cssText = 'position: fixed; bottom: 20px; right: 20px; z-index: 9999; background: #dc3545; color: white; padding: 10px 15px; border: none; border-radius: 8px; font-size: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.2);';
    document.body.appendChild(testButton);
    
    // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    const createButton = document.createElement('button');
    createButton.textContent = '–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä';
    createButton.onclick = showCreateTourForm;
    createButton.style.cssText = 'position: fixed; bottom: 20px; right: 180px; z-index: 9999; background: #28a745; color: white; padding: 10px 15px; border: none; border-radius: 8px; font-size: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.2);';
    createButton.id = 'create-tour-button';
    document.body.appendChild(createButton);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    createButton.style.display = 'none';
  }
});



-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\frontend\index.html]
[–†–∞–∑–º–µ—Ä: 6145 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-21 13:55:05.044077]

<!doctype html>
<html lang="ru">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Tourism Platform</title>
    <link rel="stylesheet" href="/styles.css" />
  </head>
  <body>
    <header class="container header">
      <h1>üåç Tourism Platform</h1>
      <nav>
        <a href="#tours" onclick="showSection('tours')">–¢—É—Ä—ã</a>
        <a href="#bookings" onclick="showSection('bookings')" id="bookings-nav" class="auth-required">–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</a>
        <div class="user-section">
          <span id="user-display" class="user-info hidden">–ü—Ä–∏–≤–µ—Ç, <span id="username-display"></span>!</span>
          <button id="auth-btn" class="auth-btn" onclick="toggleAuthModal()">–í–æ–π—Ç–∏</button>
          <button id="logout-btn" class="logout-btn hidden" onclick="logout()">–í—ã–π—Ç–∏</button>
        </div>
      </nav>
    </header>

    <main class="container">
      <section id="section-tours" class="section">
        <h2>üå¥ –ù–∞—à–∏ —Ç—É—Ä—ã</h2>
        <div class="controls">
          <input id="filter-destination" placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é..." />
          <button onclick="loadTours()">–ù–∞–π—Ç–∏ —Ç—É—Ä—ã</button>
        </div>
        <div id="tours-list" class="cards"></div>
        
        <!-- –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—É—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤) -->
        <div id="admin-section" class="admin-section hidden">
          <h3 id="admin-form-title">‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç—É—Ä</h3>
          <form id="admin-tour-form" onsubmit="handleTourForm(event)">
            <input type="hidden" id="tour-id" name="tour_id" />
            <div class="grid">
              <input name="title" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–∞" required />
              <input name="destination" placeholder="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ" required />
              <input name="price" type="number" step="0.01" placeholder="–¶–µ–Ω–∞ (‚ÇΩ)" required />
              <input name="duration_days" type="number" min="1" placeholder="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–¥–Ω–µ–π)" required />
            </div>
            <textarea name="description" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–∞"></textarea>
            <input name="features" placeholder="–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)" />
            <div class="form-actions">
              <button type="submit" id="submit-tour-btn">–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä</button>
              <button type="button" id="cancel-edit-btn" class="cancel-btn hidden" onclick="cancelEditTour()">–û—Ç–º–µ–Ω–∏—Ç—å</button>
            </div>
            <span id="admin-tour-status" class="status"></span>
          </form>
          
          <!-- –°–µ–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ -->
          <div class="admin-users-section">
            <h3>üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</h3>
            <div class="controls">
              <button onclick="loadUsers()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫</button>
            </div>
            <div id="users-list" class="cards"></div>
          </div>
        </div>
      </section>

      <section id="section-bookings" class="section hidden">
        <h2>üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h2>
        <div class="controls">
          <button onclick="loadBookings()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
        </div>
        <div id="bookings-list" class="cards"></div>
      </section>

    </main>

    <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ -->
    <div id="auth-modal" class="modal hidden">
      <div class="modal-content">
        <div class="modal-header">
          <h2>üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h2>
          <button class="close-btn" onclick="closeAuthModal()">&times;</button>
        </div>
        
        <div class="auth-tabs">
          <button class="tab-btn active" onclick="switchAuthTab('login')">–í–æ–π—Ç–∏</button>
          <button class="tab-btn" onclick="switchAuthTab('register')">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</button>
        </div>
        
        <div id="login-tab" class="auth-tab active">
          <form id="login-form" onsubmit="login(event)">
            <div class="form-group">
              <label>üë§ –õ–æ–≥–∏–Ω</label>
              <input name="username" placeholder="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω" required />
            </div>
            <div class="form-group">
              <label>üîí –ü–∞—Ä–æ–ª—å</label>
              <input name="password" type="password" placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å" required />
            </div>
            <button type="submit" class="submit-btn">–í–æ–π—Ç–∏</button>
            <span id="login-status" class="status"></span>
          </form>
        </div>
        
        <div id="register-tab" class="auth-tab">
          <form id="register-form" onsubmit="registerUser(event)">
            <div class="form-group">
              <label>üë§ –õ–æ–≥–∏–Ω</label>
              <input name="username" placeholder="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω" required />
            </div>
            <div class="form-group">
              <label>üîí –ü–∞—Ä–æ–ª—å</label>
              <input name="password" type="password" placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å" required />
            </div>
            <div class="form-group">
              <label>üìß Email</label>
              <input name="email" type="email" placeholder="–í–≤–µ–¥–∏—Ç–µ email" required />
            </div>
            <div class="form-group">
              <label>üëã –ò–º—è</label>
              <input name="name" placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è" required />
            </div>
            <div class="form-group">
              <label>üì± –¢–µ–ª–µ—Ñ–æ–Ω</label>
              <input name="phone" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω" />
            </div>
            <button type="submit" class="submit-btn">–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</button>
            <span id="register-status" class="status"></span>
          </form>
        </div>
      </div>
    </div>

    <script src="/script.js"></script>
  </body>
  </html>



-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\frontend\styles.css]
[–†–∞–∑–º–µ—Ä: 11587 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-21 13:55:05.045075]

:root { 
  --bg: #f8fafc; 
  --fg: #1e293b; 
  --muted: #64748b; 
  --primary: #3b82f6; 
  --primary-hover: #2563eb;
  --card: #ffffff; 
  --border: #e2e8f0;
  --border-hover: #cbd5e1;
  --success: #10b981;
  --error: #ef4444;
  --warning: #f59e0b;
  --shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
}

* { box-sizing: border-box; }
body { 
  margin: 0; 
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif; 
  background: var(--bg); 
  color: var(--fg);
  line-height: 1.6;
}

.container { max-width: 1200px; margin: 0 auto; padding: 20px; }

.header { 
  display: flex; 
  align-items: center; 
  justify-content: space-between; 
  border-bottom: 1px solid var(--border);
  background: var(--card);
  box-shadow: var(--shadow);
  border-radius: 12px;
  margin-bottom: 20px;
  padding: 16px 24px;
}

.header h1 { 
  margin: 0; 
  color: var(--primary); 
  font-size: 1.8rem;
  font-weight: 700;
}

nav { 
  display: flex; 
  align-items: center; 
  gap: 16px; 
}

nav a { 
  color: var(--fg); 
  text-decoration: none; 
  padding: 8px 16px; 
  border-radius: 8px; 
  font-weight: 500;
  transition: all 0.2s;
}

nav a:hover { 
  background: var(--border); 
  color: var(--primary);
}

.user-section {
  display: flex;
  align-items: center;
  gap: 12px;
}

.user-info {
  color: var(--muted);
  font-size: 0.9rem;
}

.auth-btn, .logout-btn {
  padding: 8px 16px;
  border-radius: 8px;
  border: none;
  cursor: pointer;
  font-weight: 500;
  transition: all 0.2s;
}

.auth-btn {
  background: var(--primary);
  color: white;
}

.auth-btn:hover {
  background: var(--primary-hover);
}

.logout-btn {
  background: var(--error);
  color: white;
}

.logout-btn:hover {
  background: #dc2626;
}

.auth-required {
  opacity: 0.5;
  pointer-events: none;
}

.auth-required.authenticated {
  opacity: 1;
  pointer-events: auto;
}

.section { padding: 24px 0; }
.hidden { display: none !important; }

.controls { 
  display: flex; 
  gap: 12px; 
  margin: 20px 0; 
  align-items: center;
}

.grid { 
  display: grid; 
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); 
  gap: 16px; 
}

input, textarea, button { 
  padding: 12px 16px; 
  border-radius: 8px; 
  border: 1px solid var(--border); 
  background: var(--card); 
  color: var(--fg);
  font-size: 1rem;
  transition: all 0.2s;
}

input:focus, textarea:focus {
  outline: none;
  border-color: var(--primary);
  box-shadow: 0 0 0 3px rgb(59 130 246 / 0.1);
}

textarea { min-height: 100px; resize: vertical; }

button { 
  background: var(--primary); 
  color: white;
  border: none; 
  cursor: pointer; 
  font-weight: 500;
}

button:hover { 
  background: var(--primary-hover);
  transform: translateY(-1px);
}

button:active {
  transform: translateY(0);
}

.cards { 
  display: grid; 
  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr)); 
  gap: 20px; 
  margin-top: 20px;
}

.card { 
  background: var(--card); 
  border: 1px solid var(--border); 
  border-radius: 12px; 
  padding: 20px;
  box-shadow: var(--shadow);
  transition: all 0.2s;
  display: flex;
  flex-direction: column;
}

.card:hover {
  box-shadow: var(--shadow-lg);
  transform: translateY(-2px);
}

.card h4 {
  margin: 0 0 12px 0;
  color: var(--primary);
  font-size: 1.2rem;
}

.card .price {
  font-size: 1.5rem;
  font-weight: 700;
  color: var(--success);
  margin: 8px 0;
}

.card .duration {
  color: var(--muted);
  font-size: 0.9rem;
}

.card .available {
  display: inline-block;
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 0.8rem;
  font-weight: 500;
  margin-top: 8px;
}

.card .available.true {
  background: #dcfce7;
  color: #166534;
}

.card .available.false {
  background: #fef2f2;
  color: #991b1b;
}

.book-btn {
  width: 100%;
  margin-top: 12px;
  background: var(--success);
}

.book-btn:hover {
  background: #059669;
}

.book-btn:disabled {
  background: var(--muted);
  cursor: not-allowed;
  transform: none;
}

.status { 
  margin-left: 12px; 
  color: var(--muted); 
  font-size: 0.9rem;
}

.muted { color: var(--muted); }

.error { 
  background: #fef2f2; 
  border-color: var(--error); 
  color: var(--error);
}

.success {
  background: #f0fdf4;
  border-color: var(--success);
  color: var(--success);
}

.admin-section {
  margin-top: 40px;
  padding: 24px;
  background: var(--card);
  border-radius: 12px;
  border: 1px solid var(--border);
}

/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */
.modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.modal-content {
  background: var(--card);
  border-radius: 16px;
  width: 90%;
  max-width: 500px;
  max-height: 90vh;
  overflow-y: auto;
  box-shadow: var(--shadow-lg);
}

.modal-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 24px 24px 0 24px;
  border-bottom: 1px solid var(--border);
  margin-bottom: 24px;
}

.modal-header h2 {
  margin: 0;
  color: var(--primary);
}

.close-btn {
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  color: var(--muted);
  padding: 0;
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
}

.close-btn:hover {
  background: var(--border);
  color: var(--fg);
}

.auth-tabs {
  display: flex;
  margin: 0 24px 24px 24px;
  border-bottom: 1px solid var(--border);
}

.tab-btn {
  flex: 1;
  padding: 12px;
  background: none;
  border: none;
  cursor: pointer;
  color: var(--muted);
  font-weight: 500;
  border-bottom: 2px solid transparent;
  transition: all 0.2s;
}

.tab-btn.active {
  color: var(--primary);
  border-bottom-color: var(--primary);
}

.auth-tab {
  padding: 0 24px 24px 24px;
  display: none;
}

.auth-tab.active {
  display: block;
}

.form-group {
  margin-bottom: 20px;
}

.form-group label {
  display: block;
  margin-bottom: 8px;
  font-weight: 500;
  color: var(--fg);
}

.submit-btn {
  width: 100%;
  padding: 14px;
  font-size: 1.1rem;
  margin-top: 8px;
}

/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ç—É—Ä–æ–≤ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π */
.card .destination {
  color: var(--muted);
  font-size: 0.9rem;
  margin-bottom: 8px;
}

.card .description {
  margin: 8px 0;
  line-height: 1.5;
}

.card .features {
  margin: 8px 0;
  font-size: 0.9rem;
  color: var(--muted);
  max-height: 120px;
  overflow-y: auto;
  border: 1px solid var(--border);
  border-radius: 6px;
  padding: 8px;
  background: #f8fafc;
}

.card .features ul {
  margin: 0;
  padding-left: 16px;
  list-style-type: disc;
}

.card .features li {
  margin: 4px 0;
  line-height: 1.4;
}

/* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞ –¥–ª—è features */
.card .features::-webkit-scrollbar {
  width: 6px;
}

.card .features::-webkit-scrollbar-track {
  background: #f1f5f9;
  border-radius: 3px;
}

.card .features::-webkit-scrollbar-thumb {
  background: var(--muted);
  border-radius: 3px;
}

.card .features::-webkit-scrollbar-thumb:hover {
  background: #475569;
}

.booking-info {
  margin: 12px 0;
}

.booking-info > div {
  margin: 4px 0;
}

.status {
  display: flex;
  gap: 8px;
  margin: 8px 0;
  flex-wrap: wrap;
}

.status-badge, .payment-badge {
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 0.8rem;
  font-weight: 500;
}

.status-badge.pending {
  background: #fef3c7;
  color: #92400e;
}

.status-badge.confirmed {
  background: #dcfce7;
  color: #166534;
}

.status-badge.cancelled {
  background: #fef2f2;
  color: #991b1b;
}

.status-badge.completed {
  background: #e0e7ff;
  color: #3730a3;
}

.payment-badge.pending {
  background: #fef3c7;
  color: #92400e;
}

.payment-badge.paid {
  background: #dcfce7;
  color: #166534;
}

.payment-badge.refunded {
  background: #fef2f2;
  color: #991b1b;
}

.booking-actions {
  display: flex;
  gap: 8px;
  margin-top: 12px;
}

.confirm-btn {
  background: var(--success);
  flex: 1;
}

.cancel-btn {
  background: var(--error);
  flex: 1;
}

.confirm-btn:hover {
  background: #059669;
}

.cancel-btn:hover {
  background: #dc2626;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç—É—Ä–æ–≤ */
.card-actions {
  margin-top: auto;
}

.admin-actions {
  display: flex;
  gap: 8px;
  margin-top: 8px;
}

.edit-btn, .delete-btn {
  flex: 1;
  padding: 8px 12px;
  font-size: 0.9rem;
}

.edit-btn {
  background: var(--warning);
}

.edit-btn:hover {
  background: #d97706;
}

.delete-btn {
  background: var(--error);
}

.delete-btn:hover {
  background: #dc2626;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è —Ñ–æ—Ä–º—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ */
.form-actions {
  display: flex;
  gap: 12px;
  margin-top: 16px;
}

.form-actions button {
  flex: 1;
}

.cancel-btn {
  background: var(--muted);
}

.cancel-btn:hover {
  background: #475569;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è —Å–µ–∫—Ü–∏–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π */
.bookings-section {
  margin-bottom: 32px;
}

.bookings-section h3 {
  margin: 0 0 16px 0;
  color: var(--primary);
  font-size: 1.3rem;
  border-bottom: 2px solid var(--border);
  padding-bottom: 8px;
}

.bookings-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 16px;
}

.bookings-grid.cancelled {
  opacity: 0.7;
}

.booking-card {
  position: relative;
}

.booking-card.cancelled {
  background: #f8f9fa;
  border-color: #e9ecef;
}

.booking-card.cancelled h4 {
  color: var(--muted);
  text-decoration: line-through;
}

.booking-card.cancelled .price {
  color: var(--muted);
}

/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
.user-info.admin {
  color: var(--warning);
  font-weight: 600;
}

.user-info.admin::after {
  content: " üëë";
}

/* –°—Ç–∏–ª–∏ –¥–ª—è —Å–µ–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ */
.admin-users-section {
  margin-top: 32px;
  padding: 24px;
  background: #f8fafc;
  border-radius: 12px;
  border: 1px solid var(--border);
}

.admin-users-section h3 {
  margin: 0 0 16px 0;
  color: var(--primary);
  font-size: 1.3rem;
  border-bottom: 2px solid var(--border);
  padding-bottom: 8px;
}

.user-card {
  position: relative;
  border-left: 4px solid var(--border);
}

.user-card.current-user {
  border-left-color: var(--primary);
  background: #f0f9ff;
}

.user-card .user-info {
  margin: 12px 0;
}

.user-card .user-info > div {
  margin: 4px 0;
  font-size: 0.9rem;
}

.user-meta {
  display: flex;
  gap: 12px;
  margin-top: 8px;
  flex-wrap: wrap;
}

.user-id {
  color: var(--muted);
  font-size: 0.8rem;
  background: #f1f5f9;
  padding: 2px 6px;
  border-radius: 4px;
}

.admin-badge {
  background: var(--warning);
  color: white;
  padding: 2px 6px;
  border-radius: 4px;
  font-size: 0.8rem;
  font-weight: 500;
}

.user-actions {
  margin-top: 12px;
  display: flex;
  align-items: center;
  gap: 8px;
  flex-wrap: wrap;
}

.current-user-text {
  color: var(--primary);
  font-size: 0.9rem;
  font-weight: 500;
}

.admin-protected {
  color: var(--warning);
  font-size: 0.9rem;
  font-weight: 500;
}

.user-card .delete-btn {
  background: var(--error);
  padding: 6px 12px;
  font-size: 0.9rem;
}

.user-card .delete-btn:hover {
  background: #dc2626;
}

@media (max-width: 768px) {
  .header {
    flex-direction: column;
    gap: 16px;
    text-align: center;
  }
  
  nav {
    flex-wrap: wrap;
    justify-content: center;
  }
  
  .grid {
    grid-template-columns: 1fr;
  }
  
  .cards {
    grid-template-columns: 1fr;
  }
  
  .modal-content {
    width: 95%;
    margin: 20px;
  }
}



-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\Copy_Files_POSSIBLE_DANGER_RUN_ONLY_HERE.py]
[–†–∞–∑–º–µ—Ä: 5446 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-24 16:13:12.797683]

import os
import sys
import glob
from pathlib import Path
from datetime import datetime

def main():
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if len(sys.argv) > 1:
        root_dir = sys.argv[1]
    else:
        root_dir = os.path.dirname(os.path.abspath(__file__))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists(root_dir):
        print(f'–û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è "{root_dir}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
        input('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...')
        return 1
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –ø—É—Ç–∏
    root_dir = os.path.abspath(root_dir)
    
    print(f'–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {root_dir}')
    print()
    
    # –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if os.path.exists('Project_Files.txt'):
        os.remove('Project_Files.txt')
    
    # –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
    allowed_extensions = [
        '*.txt', '*.bat', '*.cmd', '*.ps1', '*.js', '*.html', '*.css', 
        '*.py', '*.java', '*.c', '*.cpp', '*.h', '*.cs', '*.php', 
        '*.xml', '*.json', '*.config', '*.ini', '*.md', '*.sql', 
        '*.yml', '*.yaml'
    ]
    
    # –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    exclude_dirs = ['.git', 'node_modules', 'bin', 'obj', 'packages', '.vs', '.idea']
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (1 –ú–ë)
    max_size = 1048576
    
    print('–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤...')
    print()
    
    processed_files = 0
    skipped_files = 0
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤
    for extension in allowed_extensions:
        pattern = os.path.join(root_dir, '**', extension)
        
        for file_path in glob.glob(pattern, recursive=True):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            skip_file = False
            for exclude_dir in exclude_dirs:
                if exclude_dir in file_path.split(os.sep):
                    skip_file = True
                    break
            
            if skip_file:
                continue
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
            try:
                file_size = os.path.getsize(file_path)
                mod_time = datetime.fromtimestamp(os.path.getmtime(file_path))
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
                if file_size < max_size:
                    print(f'–û–±—Ä–∞–±–æ—Ç–∫–∞: {file_path}')
                    
                    with open('Project_Files.txt', 'a', encoding='utf-8') as result_file:
                        result_file.write(f'[–§–∞–π–ª: {file_path}]\n')
                        result_file.write(f'[–†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç]\n')
                        result_file.write(f'[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {mod_time}]\n')
                        result_file.write('\n')
                        
                        # –ü–æ–ø—ã—Ç–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
                        try:
                            with open(file_path, 'r', encoding='utf-8') as src_file:
                                content = src_file.read()
                                result_file.write(content)
                        except UnicodeDecodeError:
                            # –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
                            try:
                                with open(file_path, 'r', encoding='cp1251') as src_file:
                                    content = src_file.read()
                                    result_file.write(content)
                            except:
                                result_file.write('[–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ - –≤–æ–∑–º–æ–∂–Ω–æ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª]\n')
                        except Exception as e:
                            result_file.write(f'[–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}]\n')
                        
                        result_file.write('\n')
                        result_file.write('-----\n')
                        result_file.write('\n')
                    
                    processed_files += 1
                else:
                    print(f'–ü—Ä–æ–ø—É—Å–∫ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞: {file_path} ({file_size} –±–∞–π—Ç)')
                    
                    with open('Project_Files.txt', 'a', encoding='utf-8') as result_file:
                        result_file.write(f'[–§–∞–π–ª: {file_path} - –ü–†–û–ü–£–©–ï–ù (—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} –±–∞–π—Ç)]\n')
                    
                    skipped_files += 1
                    
            except Exception as e:
                print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}')
    
    print()
    print(f'–ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Project_Files.txt')
    print(f'–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {processed_files}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_files}')
    print(f'–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {root_dir}')
    
    # –ü–∞—É–∑–∞ –≤ –∫–æ–Ω—Ü–µ
    input('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...')
    return 0

if __name__ == '__main__':
    sys.exit(main())
-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\auth-service\health_check.py]
[–†–∞–∑–º–µ—Ä: 956 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-24 20:41:23.612410]

#!/usr/bin/env python3
import sys
import requests
import os

def check_auth_service():
    try:
        # –í –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost, —Ç.–∫. —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ç–æ–≥–æ –∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        host = os.getenv("HEALTH_CHECK_HOST", "localhost")
        response = requests.get(f"http://{host}:8000/health", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Auth Service: {data['status']}, Database: {data.get('database', 'unknown')}")
            return data['status'] == 'healthy'
        else:
            print(f"‚ùå Auth Service: HTTP {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Auth Service: Connection failed - {e}")
        return False

if __name__ == "__main__":
    if check_auth_service():
        sys.exit(0)
    else:
        sys.exit(1)
-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\auth-service\__init__.py]
[–†–∞–∑–º–µ—Ä: 0 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-21 13:35:43.001250]


-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\auth-service\src\auth_utils.py]
[–†–∞–∑–º–µ—Ä: 1697 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-21 13:55:05.045075]

# auth-service/src/auth_utils.py
from jose import JWTError, jwt
from datetime import datetime, timedelta
from typing import Optional
import bcrypt
import os

# –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏ –∞–ª–≥–æ—Ä–∏—Ç–º —á–∏—Ç–∞–µ–º –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
SECRET_KEY = os.getenv("SECRET_KEY", "tourism-platform-secret-key-2024-production-ready")
ALGORITHM = os.getenv("JWT_ALGORITHM", "HS256")
ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv("ACCESS_TOKEN_EXPIRE_MINUTES", "30"))

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
ADMIN_USERS = ['admin', 'manager', 'root', 'boss']

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

def verify_password(plain_password: str, hashed_password: str) -> bool:
    return bcrypt.checkpw(plain_password.encode('utf-8'), hashed_password.encode('utf-8'))

def verify_token(token: str):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            return None
        return username
    except JWTError:
        return None

def is_admin_user(username: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return username in ADMIN_USERS
-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\auth-service\src\database.py]
[–†–∞–∑–º–µ—Ä: 1338 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-24 13:00:31.859317]

# auth-service/src/database.py
from sqlalchemy import create_engine, text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import SQLAlchemyError
from fastapi import HTTPException, status
import os

# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost
# –î–ª—è Docker –∏—Å–ø–æ–ª—å–∑—É–µ–º postgres (–∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://admin:password@localhost:5432/auth_db")

engine = create_engine(
    DATABASE_URL,
    pool_pre_ping=True,
    pool_recycle=300,
)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

def get_db():
    db = None
    try:
        db = SessionLocal()
        # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        db.execute(text("SELECT 1"))
        yield db
    except SQLAlchemyError as e:
        print(f"–°–≤—è–∑—å —Å –ë–î —Ä–∞–∑–æ—Ä–≤–∞–Ω–∞: {e}")
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="–°–≤—è–∑—å —Å –ë–î —Ä–∞–∑–æ—Ä–≤–∞–Ω–∞"
        )
    finally:
        if db is not None:
            try:
                db.close()
            except Exception:
                pass
-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\auth-service\src\main.py]
[–†–∞–∑–º–µ—Ä: 6285 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-24 20:40:28.302419]

# auth-service/src/main.py
import time
from datetime import datetime
from sqlalchemy import text
from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from sqlalchemy.orm import Session
from typing import List
import bcrypt
from jose import JWTError, jwt

from . import models, schemas, auth_utils
from .database import SessionLocal, engine, get_db
from sqlalchemy.exc import SQLAlchemyError

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î (–µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ‚Äî –Ω–µ –ø–∞–¥–∞–µ–º)
try:
    models.Base.metadata.create_all(bind=engine)
except SQLAlchemyError as e:
    print(f"–°–≤—è–∑—å —Å –ë–î —Ä–∞–∑–æ—Ä–≤–∞–Ω–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")

app = FastAPI(
    title="Auth Service",
    description="Microservice for authentication and user management",
    version="1.0.0"
)

security = HTTPBearer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
async def get_current_user(
    credentials: HTTPAuthorizationCredentials = Depends(security),
    db: Session = Depends(get_db)
):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    
    try:
        payload = jwt.decode(credentials.credentials, auth_utils.SECRET_KEY, algorithms=[auth_utils.ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception
    
    user = db.query(models.User).filter(models.User.username == username).first()
    if user is None:
        raise credentials_exception
    return user




@app.get("/health")
async def health_check(db: Session = Depends(get_db)):
    try:
        db.execute(text("SELECT 1"))
        db_status = "connected"
    except Exception:
        db_status = "disconnected"
    
    return {
        "status": "healthy" if db_status == "connected" else "unhealthy",
        "service": "auth-service",  
        "database": db_status,
        "timestamp": datetime.utcnow().isoformat()
    }





# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–æ—Å—Ç–∞–µ—Ç—Å—è –ø—É–±–ª–∏—á–Ω–æ–π)
@app.post("/users", response_model=schemas.UserResponse, status_code=status.HTTP_201_CREATED)
async def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
    existing_user = db.query(models.User).filter(
        (models.User.username == user.username) | 
        (models.User.email == user.email)
    ).first()
    
    if existing_user:
        raise HTTPException(status_code=400, detail="Username or email already exists")
    
    hashed_password = bcrypt.hashpw(user.password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
    
    db_user = models.User(
        username=user.username,
        password_hash=hashed_password,
        email=user.email,
        name=user.name,
        phone=user.phone
    )
    
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user

# –õ–û–ì–ò–ù - –ø–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
@app.post("/login", response_model=schemas.Token)
async def login(user_data: schemas.UserLogin, db: Session = Depends(get_db)):
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.query(models.User).filter(models.User.username == user_data.username).first()
    if not user or not auth_utils.verify_password(user_data.password, user.password_hash):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
        )
    
    # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    access_token = auth_utils.create_access_token(data={"sub": user.username})
    return {"access_token": access_token, "token_type": "bearer"}

# üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–û–†–Ø–î–û–ö - /users/me –î–û /users/{user_id}
# –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.get("/users/me", response_model=schemas.UserResponse)
async def read_users_me(current_user: models.User = Depends(get_current_user)):
    return current_user

# –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
@app.get("/users/{user_id}", response_model=schemas.UserResponse)
async def get_user(
    user_id: int, 
    current_user: models.User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    user = db.query(models.User).filter(models.User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return user

# –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
@app.get("/users", response_model=List[schemas.UserResponse])
async def get_users(
    skip: int = 0, 
    limit: int = 100, 
    current_user: models.User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    users = db.query(models.User).offset(skip).limit(limit).all()
    return users

# –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
@app.delete("/users/{user_id}")
async def delete_user(
    user_id: int,
    current_user: models.User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not auth_utils.is_admin_user(current_user.username):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not enough permissions"
        )
    
    # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if user_id == current_user.id:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Cannot delete yourself"
        )
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    user = db.query(models.User).filter(models.User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.delete(user)
    db.commit()
    
    return {"message": "User deleted successfully"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\auth-service\src\models.py]
[–†–∞–∑–º–µ—Ä: 613 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-21 13:35:43.055233]


from sqlalchemy import Column, Integer, String, DateTime
from sqlalchemy.sql import func
from .database import Base

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String(50), unique=True, index=True, nullable=False)
    password_hash = Column(String(255), nullable=False)  # –ë—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –•–ï–®
    email = Column(String(100), unique=True, index=True, nullable=False)
    name = Column(String(100), nullable=False)
    phone = Column(String(20))
    created_at = Column(DateTime(timezone=True), server_default=func.now())
-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\auth-service\src\schemas.py]
[–†–∞–∑–º–µ—Ä: 632 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-21 13:35:43.062745]

# auth-service/src/schemas.py
from pydantic import BaseModel
from typing import Optional
from datetime import datetime

class UserCreate(BaseModel):
    username: str
    password: str
    email: str
    name: str
    phone: Optional[str] = None

class UserResponse(BaseModel):
    id: int
    username: str
    email: str
    name: str
    phone: Optional[str]
    created_at: datetime

    class Config:
        from_attributes = True

class UserLogin(BaseModel):
    username: str
    password: str

class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    username: Optional[str] = None
-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\auth-service\src\__init__.py]
[–†–∞–∑–º–µ—Ä: 0 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-21 13:35:43.035422]


-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\booking-service\health_check.py]
[–†–∞–∑–º–µ—Ä: 973 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-24 22:35:03.928233]

#!/usr/bin/env python3
import sys
import requests
import os

def check_booking_service():
    try:
        # –í –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost, —Ç.–∫. —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ç–æ–≥–æ –∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        host = os.getenv("HEALTH_CHECK_HOST", "localhost")
        response = requests.get(f"http://{host}:8002/health", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Booking Service: {data['status']}, Database: {data.get('database', 'unknown')}")
            return data['status'] == 'healthy'
        else:
            print(f"‚ùå Booking Service: HTTP {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Booking Service: Connection failed - {e}")
        return False

if __name__ == "__main__":
    if check_booking_service():
        sys.exit(0)
    else:
        sys.exit(1)

-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\booking-service\src\auth_utils.py]
[–†–∞–∑–º–µ—Ä: 2701 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-21 13:55:05.048295]

# booking-service/src/auth_utils.py
from jose import JWTError, jwt
from fastapi import HTTPException, status
import os
import httpx

# –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏ –∞–ª–≥–æ—Ä–∏—Ç–º —á–∏—Ç–∞–µ–º –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å auth-service)
SECRET_KEY = os.getenv("SECRET_KEY", "tourism-platform-secret-key-2024-production-ready")
ALGORITHM = os.getenv("JWT_ALGORITHM", "HS256")

def verify_token(token: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç JWT —Ç–æ–∫–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç username"""
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            return None
        return username
    except JWTError:
        return None

async def get_user_from_auth_service(user_id: int, token: str = None):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ auth-service"""
    try:
        async with httpx.AsyncClient() as client:
            # –í Docker compose –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Å–µ—Ä–≤–∏—Å–∞
            auth_service_url = os.getenv("AUTH_SERVICE_URL", "http://auth-service:8000")
            headers = {}
            if token:
                headers["Authorization"] = f"Bearer {token}"
            
            url = f"{auth_service_url}/users/{user_id}"
            print(f"–ó–∞–ø—Ä–æ—Å –∫ auth-service: {url}")
            print(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
            
            response = await client.get(url, headers=headers)
            print(f"–û—Ç–≤–µ—Ç –æ—Ç auth-service: {response.status_code}")
            
            if response.status_code == 200:
                user_data = response.json()
                print(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data}")
                return user_data
            else:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç auth-service: {response.status_code} - {response.text}")
                return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ auth-service: {e}")
        return None

async def validate_user_exists(user_id: int, token: str = None):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ auth-service"""
    print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å —Ç–æ–∫–µ–Ω–æ–º: {token[:20] if token else 'None'}...")
    user = await get_user_from_auth_service(user_id, token)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")
    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="User not found"
        )
    return user

-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\booking-service\src\database.py]
[–†–∞–∑–º–µ—Ä: 1034 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-24 13:00:31.859317]

from sqlalchemy import create_engine, text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import SQLAlchemyError
from fastapi import HTTPException, status
import os

DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://admin:password@localhost:5432/booking_db")

engine = create_engine(
    DATABASE_URL,
    pool_pre_ping=True,
    pool_recycle=300,
)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

def get_db():
    db = None
    try:
        db = SessionLocal()
        db.execute(text("SELECT 1"))
        yield db
    except SQLAlchemyError as e:
        print(f"–°–≤—è–∑—å —Å –ë–î —Ä–∞–∑–æ—Ä–≤–∞–Ω–∞: {e}")
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="–°–≤—è–∑—å —Å –ë–î —Ä–∞–∑–æ—Ä–≤–∞–Ω–∞"
        )
    finally:
        if db is not None:
            try:
                db.close()
            except Exception:
                pass
-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\booking-service\src\main.py]
[–†–∞–∑–º–µ—Ä: 11821 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-24 22:35:30.814198]

# booking-service/src/main.py
from fastapi import FastAPI, Depends, HTTPException, status, Query
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from sqlalchemy.orm import Session
from sqlalchemy import text
from typing import List, Optional
from datetime import datetime
from decimal import Decimal
import httpx
import os

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
from .models import Booking as BookingModel
from .schemas import (
    BookingCreate, BookingUpdate, BookingStatusUpdate, 
    Booking as BookingSchema, BookingStats
)
from .database import SessionLocal, engine, get_db
from .auth_utils import verify_token, validate_user_exists

# –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ init.sql –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î

app = FastAPI(
    title="Booking Service",
    description="Microservice for managing tour bookings",
    version="1.0.0"
)

security = HTTPBearer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
async def get_current_user(
    credentials: HTTPAuthorizationCredentials = Depends(security)
):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    
    username = verify_token(credentials.credentials)
    if username is None:
        raise credentials_exception
    
    return username

@app.get("/health")
async def health_check(db: Session = Depends(get_db)):
    try:
        db.execute(text("SELECT 1"))
        db_status = "connected"
    except Exception:
        db_status = "disconnected"
    
    return {
        "status": "healthy" if db_status == "connected" else "unhealthy",
        "service": "booking-service", 
        "database": db_status,
        "timestamp": datetime.utcnow().isoformat()
    }
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Ç—É—Ä–∞
async def get_tour_price(tour_id: int) -> Decimal:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É —Ç—É—Ä–∞ –∏–∑ tours-service"""
    try:
        async with httpx.AsyncClient() as client:
            # –í Docker compose –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Å–µ—Ä–≤–∏—Å–∞
            tours_service_url = os.getenv("TOURS_SERVICE_URL", "http://tours-service:8001")
            # –≠–Ω–¥–ø–æ–∏–Ω—Ç /tours/{tour_id} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø–æ—ç—Ç–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω
            response = await client.get(f"{tours_service_url}/tours/{tour_id}")
            if response.status_code == 200:
                tour_data = response.json()
                return Decimal(str(tour_data["price"]))
            else:
                raise HTTPException(
                    status_code=status.HTTP_404_NOT_FOUND,
                    detail="Tour not found"
                )
    except httpx.RequestError as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ tours-service: {e}")
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="Tours service unavailable"
        )

# POST /bookings - —Å–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
@app.post("/bookings", response_model=BookingSchema, status_code=status.HTTP_201_CREATED)
async def create_booking(
    booking: BookingCreate, 
    current_user: str = Depends(get_current_user),
    credentials: HTTPAuthorizationCredentials = Depends(security),
    db: Session = Depends(get_db)
):
    try:
        print(f"–°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: user_id={booking.user_id}, tour_id={booking.tour_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–µ—Ä–µ–¥–∞–≤–∞—è —Ç–æ–∫–µ–Ω
        await validate_user_exists(booking.user_id, credentials.credentials)
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Ç—É—Ä–∞ –∏–∑ tours-service
        tour_price = await get_tour_price(booking.tour_id)
        total_price = tour_price * booking.participants_count
        print(f"–¶–µ–Ω–∞ —Ç—É—Ä–∞: {tour_price}, –æ–±—â–∞—è —Ü–µ–Ω–∞: {total_price}")
        
        db_booking = BookingModel(
            title=booking.title,
            user_id=booking.user_id,
            tour_id=booking.tour_id,
            travel_date=booking.travel_date,
            participants_count=booking.participants_count,
            total_price=total_price,
            special_requests=booking.special_requests,
            contact_phone=booking.contact_phone,
            contact_email=booking.contact_email
        )
        
        db.add(db_booking)
        db.commit()
        db.refresh(db_booking)
        print(f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID: {db_booking.id}")
        return db_booking
    except Exception as e:
        db.rollback()
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Error creating booking: {str(e)}")

# GET /bookings/{id} - –ø–æ–ª—É—á–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ ID
@app.get("/bookings/{booking_id}", response_model=BookingSchema)
async def get_booking(
    booking_id: int, 
    current_user: str = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    booking = db.query(BookingModel).filter(BookingModel.id == booking_id).first()
    if not booking:
        raise HTTPException(status_code=404, detail="Booking not found")
    return booking

# GET /bookings/user/{user_id} - –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.get("/bookings/user/{user_id}", response_model=List[BookingSchema])
async def get_user_bookings(
    user_id: int, 
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=100),
    status_filter: Optional[str] = Query(None, alias="status"),
    current_user: str = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    query = db.query(BookingModel).filter(BookingModel.user_id == user_id)
    
    if status_filter:
        query = query.filter(BookingModel.status == status_filter)
    
    bookings = query.offset(skip).limit(limit).all()
    return bookings

# GET /bookings/tour/{tour_id} - –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–∞
@app.get("/bookings/tour/{tour_id}", response_model=List[BookingSchema])
async def get_tour_bookings(
    tour_id: int,
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=100),
    current_user: str = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    bookings = db.query(BookingModel).filter(
        BookingModel.tour_id == tour_id
    ).offset(skip).limit(limit).all()
    return bookings

# PUT /bookings/{id} - –æ–±–Ω–æ–≤–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
@app.put("/bookings/{booking_id}", response_model=BookingSchema)
async def update_booking(
    booking_id: int, 
    booking_update: BookingUpdate, 
    current_user: str = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    db_booking = db.query(BookingModel).filter(BookingModel.id == booking_id).first()
    if not db_booking:
        raise HTTPException(status_code=404, detail="Booking not found")
    
    if db_booking.status == "cancelled":
        raise HTTPException(status_code=400, detail="Cannot update cancelled booking")
    
    update_data = booking_update.model_dump(exclude_unset=True)
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if "participants_count" in update_data:
        tour_price = await get_tour_price(db_booking.tour_id)
        update_data["total_price"] = tour_price * update_data["participants_count"]
    
    for field, value in update_data.items():
        setattr(db_booking, field, value)
    
    db.commit()
    db.refresh(db_booking)
    return db_booking

# PUT /bookings/{id}/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
@app.put("/bookings/{booking_id}/cancel", response_model=BookingSchema)
async def cancel_booking(
    booking_id: int, 
    current_user: str = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    db_booking = db.query(BookingModel).filter(BookingModel.id == booking_id).first()
    if not db_booking:
        raise HTTPException(status_code=404, detail="Booking not found")
    
    if db_booking.status == "cancelled":
        raise HTTPException(status_code=400, detail="Booking already cancelled")
    
    if db_booking.status == "completed":
        raise HTTPException(status_code=400, detail="Cannot cancel completed booking")
    
    db_booking.status = "cancelled"
    db_booking.payment_status = "refunded"
    
    db.commit()
    db.refresh(db_booking)
    return db_booking

# POST /bookings/{id}/confirm - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
@app.post("/bookings/{booking_id}/confirm", response_model=BookingSchema)
async def confirm_booking(
    booking_id: int, 
    current_user: str = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    db_booking = db.query(BookingModel).filter(BookingModel.id == booking_id).first()
    if not db_booking:
        raise HTTPException(status_code=404, detail="Booking not found")
    
    if db_booking.status != "pending":
        raise HTTPException(status_code=400, detail="Only pending bookings can be confirmed")
    
    db_booking.status = "confirmed"
    db_booking.payment_status = "paid"
    
    db.commit()
    db.refresh(db_booking)
    return db_booking

# GET /bookings/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
@app.get("/bookings/stats", response_model=BookingStats)
async def get_booking_stats(
    current_user: str = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    total_bookings = db.query(BookingModel).count()
    
    pending_bookings = db.query(BookingModel).filter(BookingModel.status == "pending").count()
    confirmed_bookings = db.query(BookingModel).filter(BookingModel.status == "confirmed").count()
    cancelled_bookings = db.query(BookingModel).filter(BookingModel.status == "cancelled").count()
    completed_bookings = db.query(BookingModel).filter(BookingModel.status == "completed").count()
    
    # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π –≤—ã—Ä—É—á–∫–∏
    revenue_result = db.query(BookingModel.total_price).filter(
        BookingModel.status.in_(["confirmed", "completed"])
    ).all()
    total_revenue = sum(Decimal(str(row[0])) for row in revenue_result)
    
    average_booking_value = total_revenue / confirmed_bookings if confirmed_bookings > 0 else Decimal("0")
    
    return BookingStats(
        total_bookings=total_bookings,
        pending_bookings=pending_bookings,
        confirmed_bookings=confirmed_bookings,
        cancelled_bookings=cancelled_bookings,
        completed_bookings=completed_bookings,
        total_revenue=total_revenue,
        average_booking_value=average_booking_value
    )

# GET /bookings - –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–∞–¥–º–∏–Ω)
@app.get("/bookings", response_model=List[BookingSchema])
async def get_all_bookings(
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=100),
    user_id: Optional[int] = Query(None),
    tour_id: Optional[int] = Query(None),
    status_filter: Optional[str] = Query(None, alias="status"),
    current_user: str = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    query = db.query(BookingModel)
    
    if user_id:
        query = query.filter(BookingModel.user_id == user_id)
    
    if tour_id:
        query = query.filter(BookingModel.tour_id == tour_id)
    
    if status_filter:
        query = query.filter(BookingModel.status == status_filter)
    
    bookings = query.offset(skip).limit(limit).all()
    return bookings

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8002)
-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\booking-service\src\models.py]
[–†–∞–∑–º–µ—Ä: 1949 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-24 13:20:17.578860]

from sqlalchemy import Column, Integer, String, Boolean, DateTime, Numeric, Text, ForeignKey, Enum
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship
import enum

from .database import Base

class BookingStatus(enum.Enum):
    PENDING = "pending"
    CONFIRMED = "confirmed"
    CANCELLED = "cancelled"
    COMPLETED = "completed"

class PaymentStatus(enum.Enum):
    PENDING = "pending"
    PAID = "paid"
    REFUNDED = "refunded"

class Booking(Base):
    __tablename__ = "bookings"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, nullable=False, index=True)
    tour_id = Column(Integer, nullable=False, index=True)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
    title = Column(String(200), nullable=False)
    booking_date = Column(DateTime(timezone=True), server_default=func.now())
    travel_date = Column(DateTime(timezone=True), nullable=False)
    participants_count = Column(Integer, nullable=False, default=1)
    total_price = Column(Numeric(10, 2), nullable=False)
    
    # –°—Ç–∞—Ç—É—Å—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ (ENUM –≤ –ë–î –±—É–¥–µ—Ç –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è)
    status = Column(String(20), default="pending")
    payment_status = Column(String(20), default="pending")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    special_requests = Column(Text)
    contact_phone = Column(String(20))
    contact_email = Column(String(100))
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    def is_cancelled(self):
        return self.status == "cancelled"
    
    def is_confirmed(self):
        return self.status == "confirmed"
    
    def is_pending(self):
        return self.status == "pending"
-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\booking-service\src\schemas.py]
[–†–∞–∑–º–µ—Ä: 1562 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-24 13:56:47.845060]

from pydantic import BaseModel, Field
from typing import List, Optional
from datetime import datetime
from decimal import Decimal

class BookingCreate(BaseModel):
    title: str
    user_id: int
    tour_id: int
    travel_date: datetime
    participants_count: int = Field(ge=1, le=20, default=1)
    special_requests: Optional[str] = None
    contact_phone: Optional[str] = None
    contact_email: Optional[str] = None

class BookingUpdate(BaseModel):
    travel_date: Optional[datetime] = None
    participants_count: Optional[int] = Field(ge=1, le=20, default=None)
    special_requests: Optional[str] = None
    contact_phone: Optional[str] = None
    contact_email: Optional[str] = None

class BookingStatusUpdate(BaseModel):
    status: str = Field(..., pattern="^(pending|confirmed|cancelled|completed)$")
    payment_status: Optional[str] = Field(None, pattern="^(pending|paid|refunded)$")

class Booking(BaseModel):
    id: int
    user_id: int
    tour_id: int
    title: str
    booking_date: datetime
    travel_date: datetime
    participants_count: int
    total_price: Decimal
    status: str
    payment_status: str
    special_requests: Optional[str]
    contact_phone: Optional[str]
    contact_email: Optional[str]
    created_at: datetime
    updated_at: datetime

    class Config:
        from_attributes = True

class BookingStats(BaseModel):
    total_bookings: int
    pending_bookings: int
    confirmed_bookings: int
    cancelled_bookings: int
    completed_bookings: int
    total_revenue: Decimal
    average_booking_value: Decimal
-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\booking-service\src\__init__.py]
[–†–∞–∑–º–µ—Ä: 0 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-21 13:35:43.121802]


-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\tours-service\health_check.py]
[–†–∞–∑–º–µ—Ä: 963 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-24 22:35:36.217740]

#!/usr/bin/env python3
import sys
import requests
import os

def check_tours_service():
    try:
        # –í –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost, —Ç.–∫. —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ç–æ–≥–æ –∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        host = os.getenv("HEALTH_CHECK_HOST", "localhost")
        response = requests.get(f"http://{host}:8001/health", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Tours Service: {data['status']}, Database: {data.get('database', 'unknown')}")
            return data['status'] == 'healthy'
        else:
            print(f"‚ùå Tours Service: HTTP {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Tours Service: Connection failed - {e}")
        return False

if __name__ == "__main__":
    if check_tours_service():
        sys.exit(0)
    else:
        sys.exit(1)

-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\tours-service\src\auth_utils.py]
[–†–∞–∑–º–µ—Ä: 1035 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-21 13:55:05.044077]

# tours-service/src/auth_utils.py
from jose import JWTError, jwt
import os

# –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏ –∞–ª–≥–æ—Ä–∏—Ç–º —á–∏—Ç–∞–µ–º –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å auth-service)
SECRET_KEY = os.getenv("SECRET_KEY", "tourism-platform-secret-key-2024-production-ready")
ALGORITHM = os.getenv("JWT_ALGORITHM", "HS256")

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å auth-service)
ADMIN_USERS = ['admin', 'manager', 'root', 'boss']

def verify_token(token: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç JWT —Ç–æ–∫–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç username"""
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            return None
        return username
    except JWTError:
        return None

def is_admin_user(username: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return username in ADMIN_USERS

-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\tours-service\src\database.py]
[–†–∞–∑–º–µ—Ä: 1032 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-24 13:00:31.689322]

from sqlalchemy import create_engine, text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import SQLAlchemyError
from fastapi import HTTPException, status
import os

DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://admin:password@localhost:5432/tours_db")

engine = create_engine(
    DATABASE_URL,
    pool_pre_ping=True,
    pool_recycle=300,
)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

def get_db():
    db = None
    try:
        db = SessionLocal()
        db.execute(text("SELECT 1"))
        yield db
    except SQLAlchemyError as e:
        print(f"–°–≤—è–∑—å —Å –ë–î —Ä–∞–∑–æ—Ä–≤–∞–Ω–∞: {e}")
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="–°–≤—è–∑—å —Å –ë–î —Ä–∞–∑–æ—Ä–≤–∞–Ω–∞"
        )
    finally:
        if db is not None:
            try:
                db.close()
            except Exception:
                pass
-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\tours-service\src\main.py]
[–†–∞–∑–º–µ—Ä: 6081 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-24 22:35:25.481847]

# tours-service/src/main.py
from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from sqlalchemy.orm import Session
from sqlalchemy import text
from typing import List, Optional
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
from .models import Tour as TourModel  # –ú–æ–¥–µ–ª—å –∏–∑ models.py
from .schemas import TourCreate, TourUpdate, Tour as TourSchema  # –°—Ö–µ–º—ã –∏–∑ schemas.py
from .database import SessionLocal, engine, get_db
from . import auth_utils

# –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ init.sql –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î

app = FastAPI(
    title="Tours Service",
    description="Microservice for managing tours",
    version="1.0.0"
)

security = HTTPBearer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
async def get_current_user(
    credentials: HTTPAuthorizationCredentials = Depends(security)
):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    
    username = auth_utils.verify_token(credentials.credentials)
    if username is None:
        raise credentials_exception
    
    return username

@app.get("/health")
async def health_check(db: Session = Depends(get_db)):
    try:
        db.execute(text("SELECT 1"))
        db_status = "connected"
    except Exception:
        db_status = "disconnected"
    
    return {
        "status": "healthy" if db_status == "connected" else "unhealthy",
        "service": "tours-service",  
        "database": db_status,
        "timestamp": datetime.utcnow().isoformat()
    }

# Get all tours
@app.get("/tours", response_model=List[TourSchema])
async def get_tours(
    skip: int = 0, 
    limit: int = 100,
    destination: Optional[str] = None,
    available: Optional[bool] = None,
    db: Session = Depends(get_db)
):
    query = db.query(TourModel)
    
    if destination:
        query = query.filter(TourModel.destination.ilike(f"%{destination}%"))
    
    if available is not None:
        query = query.filter(TourModel.available == available)
    
    tours = query.offset(skip).limit(limit).all()
    return tours

# Get tour by ID
@app.get("/tours/{tour_id}", response_model=TourSchema)
async def get_tour(tour_id: int, db: Session = Depends(get_db)):
    tour = db.query(TourModel).filter(TourModel.id == tour_id).first()
    if not tour:
        raise HTTPException(status_code=404, detail="Tour not found")
    return tour

# Create new tour
@app.post("/tours", response_model=TourSchema, status_code=status.HTTP_201_CREATED)
async def create_tour(
    tour: TourCreate, 
    current_user: str = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not auth_utils.is_admin_user(current_user):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not enough permissions"
        )
    
    db_tour = TourModel(
        title=tour.title,
        description=tour.description,
        destination=tour.destination,
        price=tour.price,
        duration_days=tour.duration_days,
        available=tour.available,
        features=tour.features
    )
    
    db.add(db_tour)
    db.commit()
    db.refresh(db_tour)
    return db_tour

# Update tour
@app.put("/tours/{tour_id}", response_model=TourSchema)
async def update_tour(
    tour_id: int, 
    tour_update: TourUpdate, 
    current_user: str = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–∞ {tour_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {current_user}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not auth_utils.is_admin_user(current_user):
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not enough permissions"
        )
    
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    db_tour = db.query(TourModel).filter(TourModel.id == tour_id).first()
    if not db_tour:
        print(f"‚ùå –¢—É—Ä {tour_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise HTTPException(status_code=404, detail="Tour not found")
    
    print(f"‚úÖ –¢—É—Ä {tour_id} –Ω–∞–π–¥–µ–Ω: {db_tour.title}")
    
    update_data = tour_update.model_dump(exclude_unset=True)
    print(f"üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_data}")
    
    for field, value in update_data.items():
        print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ {field}: {getattr(db_tour, field)} -> {value}")
        setattr(db_tour, field, value)
    
    try:
        db.commit()
        db.refresh(db_tour)
        print(f"‚úÖ –¢—É—Ä {tour_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
        return db_tour
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—É—Ä–∞: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")

# Delete tour
@app.delete("/tours/{tour_id}")
async def delete_tour(
    tour_id: int, 
    current_user: str = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not auth_utils.is_admin_user(current_user):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not enough permissions"
        )
    
    tour = db.query(TourModel).filter(TourModel.id == tour_id).first()
    if not tour:
        raise HTTPException(status_code=404, detail="Tour not found")
    
    db.delete(tour)
    db.commit()
    return {"message": "Tour deleted successfully"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8001)
-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\tours-service\src\models.py]
[–†–∞–∑–º–µ—Ä: 871 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-21 13:35:43.256705]

# tours-service/src/models.py
from sqlalchemy import Column, Integer, String, Boolean, DateTime, Numeric, Text
from sqlalchemy.dialects.postgresql import ARRAY
from sqlalchemy.sql import func

# –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
from .database import Base

class Tour(Base):
    __tablename__ = "tours"

    id = Column(Integer, primary_key=True, index=True)
    title = Column(String(200), nullable=False)
    description = Column(Text)
    destination = Column(String(100), nullable=False)
    price = Column(Numeric(10, 2), nullable=False)
    duration_days = Column(Integer, nullable=False)
    available = Column(Boolean, default=True)
    features = Column(ARRAY(Text))
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())
-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\tours-service\src\schemas.py]
[–†–∞–∑–º–µ—Ä: 1000 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-21 13:35:43.262243]

# tours-service/src/schemas.py
from pydantic import BaseModel
from typing import List, Optional
from datetime import datetime

class TourCreate(BaseModel):
    title: str
    description: Optional[str] = None
    destination: str
    price: float
    duration_days: int
    available: bool = True
    # Use default_factory to avoid shared mutable default between instances
    features: Optional[List[str]] = None

class TourUpdate(BaseModel):
    title: Optional[str] = None
    description: Optional[str] = None
    destination: Optional[str] = None
    price: Optional[float] = None
    duration_days: Optional[int] = None
    available: Optional[bool] = None
    features: Optional[List[str]] = None

class Tour(BaseModel):
    id: int
    title: str
    description: Optional[str]
    destination: str
    price: float
    duration_days: int
    available: bool
    features: Optional[List[str]]
    created_at: datetime
    updated_at: datetime

    class Config:
        from_attributes = True
-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\tours-service\src\__init__.py]
[–†–∞–∑–º–µ—Ä: 0 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-21 13:35:43.241398]


-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\README-SCRIPTS.md]
[–†–∞–∑–º–µ—Ä: 8350 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-24 22:40:01.150423]

# Tourism Platform - Docker Swarm Management Scripts

–≠—Ç–æ—Ç –Ω–∞–±–æ—Ä —Å–∫—Ä–∏–ø—Ç–æ–≤ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Tourism Platform –≤ Docker Swarm.

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

```bash
# –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
./manage-swarm.sh start

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
./manage-swarm.sh status

# –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
./manage-swarm.sh stop
```

## üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã

### –û—Å–Ω–æ–≤–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã

| –°–∫—Ä–∏–ø—Ç | –û–ø–∏—Å–∞–Ω–∏–µ | –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ |
|--------|----------|---------------|
| `manage-swarm.sh` | –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è | `./manage-swarm.sh [command]` |
| `start-swarm.sh` | –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ | `./start-swarm.sh` |
| `stop-swarm.sh` | –ë—ã—Å—Ç—Ä–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ | `./stop-swarm.sh` |
| `restart-swarm.sh` | –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ | `./restart-swarm.sh` |
| `deploy-swarm.sh` | –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ | `./deploy-swarm.sh` |
| `cleanup-swarm.sh` | –û—á–∏—Å—Ç–∫–∞ | `./cleanup-swarm.sh [--force]` |
| `check-status.sh` | –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ | `./check-status.sh [options]` |
| `logs-swarm.sh` | –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ | `./logs-swarm.sh [service] [lines]` |

## üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç

### –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

```bash
# –ó–∞–ø—É—Å–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
./manage-swarm.sh start

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
./manage-swarm.sh stop

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
./manage-swarm.sh restart

# –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ (—Å –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π)
./manage-swarm.sh deploy

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
./manage-swarm.sh status

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
./manage-swarm.sh logs [service] [lines]

# –û—á–∏—Å—Ç–∫–∞
./manage-swarm.sh cleanup

# –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
./manage-swarm.sh scale [service] [replicas]

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
./manage-swarm.sh health

# –°–ø—Ä–∞–≤–∫–∞
./manage-swarm.sh help
```

### –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

```bash
# –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
./manage-swarm.sh start

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
./manage-swarm.sh status

# –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ auth-service (50 —Å—Ç—Ä–æ–∫)
./manage-swarm.sh logs auth 50

# –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å auth-service –¥–æ 5 —Ä–µ–ø–ª–∏–∫
./manage-swarm.sh scale auth-service 5

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤
./manage-swarm.sh health

# –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
./manage-swarm.sh stop
```

## üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤

### –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç

```bash
# –í—Å–µ –ª–æ–≥–∏ (20 —Å—Ç—Ä–æ–∫ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞)
./manage-swarm.sh logs

# –õ–æ–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
./manage-swarm.sh logs auth 100
./manage-swarm.sh logs tours 50
./manage-swarm.sh logs booking 30
./manage-swarm.sh logs frontend 20
./manage-swarm.sh logs postgres 100

# –¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
./manage-swarm.sh logs errors 200

# –°–ª–µ–¥–∏—Ç—å –∑–∞ –ª–æ–≥–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
./manage-swarm.sh logs follow auth
```

### –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ logs-swarm.sh

```bash
# –í—Å–µ –ª–æ–≥–∏
./logs-swarm.sh

# –õ–æ–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
./logs-swarm.sh auth 100
./logs-swarm.sh tours 50

# –°–ª–µ–¥–∏—Ç—å –∑–∞ –ª–æ–≥–∞–º–∏
./logs-swarm.sh follow auth

# –¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
./logs-swarm.sh errors 200
```

## üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞

### –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

```bash
# –ü–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å
./manage-swarm.sh status

# –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
./check-status.sh

# –¢–æ–ª—å–∫–æ —Ä–µ—Å—É—Ä—Å—ã
./check-status.sh --resources

# –õ–æ–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
./check-status.sh --logs auth-service 20

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
./check-status.sh --health auth-service http://localhost:8000/health
```

## üßπ –û—á–∏—Å—Ç–∫–∞

### –û–±—ã—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞

```bash
# –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –æ—á–∏—Å—Ç–∏—Ç—å
./manage-swarm.sh cleanup

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
./cleanup-swarm.sh --force
```

### –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞

```bash
# –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
./manage-swarm.sh stop

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
./cleanup-swarm.sh --force

# –£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã
docker system prune -a
```

## üîß –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ

### –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤

```bash
# –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å auth-service –¥–æ 5 —Ä–µ–ø–ª–∏–∫
./manage-swarm.sh scale auth-service 5

# –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å frontend –¥–æ 3 —Ä–µ–ø–ª–∏–∫
./manage-swarm.sh scale frontend 3

# –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å tours-service –¥–æ 2 —Ä–µ–ø–ª–∏–∫
./manage-swarm.sh scale tours-service 2
```

### –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è

- `postgres` - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
- `auth-service` - –°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
- `tours-service` - –°–µ—Ä–≤–∏—Å —Ç—É—Ä–æ–≤
- `booking-service` - –°–µ—Ä–≤–∏—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
- `frontend` - –§—Ä–æ–Ω—Ç–µ–Ω–¥

## üåê –î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å–∞–º

–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ URL:

- **Frontend**: http://localhost:8080
- **Auth API**: http://localhost:8000
- **Tours API**: http://localhost:8001
- **Booking API**: http://localhost:8002

## üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

### Docker –∫–æ–º–∞–Ω–¥—ã

```bash
# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
docker service ls

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–∏—Å–∞
docker service logs tourism-platform_auth-service

# –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
docker service scale tourism-platform_auth-service=3

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
docker service update --force tourism-platform_auth-service

# –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —Å–µ—Ä–≤–∏—Å–∞
docker service ps tourism-platform_auth-service
```

### –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

```bash
# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
docker stats

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
docker system df

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
docker system info
```

## üö® –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–ø–æ–ª–∞–¥–æ–∫

### –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–ø—É—Å–∫–æ–º

```bash
# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Docker Swarm
docker node ls

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏
./manage-swarm.sh logs

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ
./manage-swarm.sh health

# –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
./manage-swarm.sh restart
```

### –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é

```bash
# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ç—å
docker network ls

# –°–æ–∑–¥–∞—Ç—å —Å–µ—Ç—å –∑–∞–Ω–æ–≤–æ
docker network create --driver overlay tourism_network
```

### –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏

```bash
# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–º–∞
docker volume ls

# –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–º–∞
docker volume prune
```

## üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

–í—Å–µ —Å–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–¥–∞—é—Ç –ª–æ–≥–∏:

- `deployment.log` - –õ–æ–≥–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
- `cleanup.log` - –õ–æ–≥–∏ –æ—á–∏—Å—Ç–∫–∏

–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:

```bash
# –õ–æ–≥–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
tail -f deployment.log

# –õ–æ–≥–∏ –æ—á–∏—Å—Ç–∫–∏
tail -f cleanup.log
```

## üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

- –í—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

## üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º:

1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: `./manage-swarm.sh status`
2. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏: `./manage-swarm.sh logs`
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–¥–æ—Ä–æ–≤—å–µ: `./manage-swarm.sh health`
4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ: `./manage-swarm.sh restart`

–î–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:

```bash
./manage-swarm.sh stop
./cleanup-swarm.sh --force
./manage-swarm.sh deploy
```

-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\infrastructure\init.sql]
[–†–∞–∑–º–µ—Ä: 2543 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-24 13:32:08.645055]

-- infrastructure/init.sql
-- –°–æ–∑–¥–∞–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
CREATE DATABASE auth_db;
CREATE DATABASE tours_db;
CREATE DATABASE booking_db;

-- auth_db (–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è + –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
\c auth_db;
CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    name VARCHAR(100) NOT NULL,
    phone VARCHAR(20),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- tours_db (—Ç—É—Ä—ã)
\c tours_db;
CREATE TABLE IF NOT EXISTS tours (
    id SERIAL PRIMARY KEY,
    title VARCHAR(200) NOT NULL,
    description TEXT,
    destination VARCHAR(100) NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    duration_days INTEGER NOT NULL,
    available BOOLEAN DEFAULT true,
    features TEXT[],
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- booking_db (–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
\c booking_db;

-- –°–æ–∑–¥–∞–µ–º ENUM —Ç–∏–ø—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
CREATE TYPE booking_status AS ENUM ('pending', 'confirmed', 'cancelled', 'completed');
CREATE TYPE payment_status AS ENUM ('pending', 'paid', 'refunded');

CREATE TABLE IF NOT EXISTS bookings (
    title VARCHAR(200) NOT NULL,
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL,
    tour_id INTEGER NOT NULL,
    booking_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    travel_date TIMESTAMP WITH TIME ZONE NOT NULL,
    participants_count INTEGER NOT NULL DEFAULT 1 CHECK (participants_count > 0 AND participants_count <= 20),
    total_price DECIMAL(10,2) NOT NULL CHECK (total_price >= 0),
    status booking_status DEFAULT 'pending',
    payment_status payment_status DEFAULT 'pending',
    special_requests TEXT,
    contact_phone VARCHAR(20),
    contact_email VARCHAR(100),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
CREATE INDEX IF NOT EXISTS idx_bookings_user_id ON bookings(user_id);
CREATE INDEX IF NOT EXISTS idx_bookings_tour_id ON bookings(tour_id);
CREATE INDEX IF NOT EXISTS idx_bookings_status ON bookings(status);
CREATE INDEX IF NOT EXISTS idx_bookings_payment_status ON bookings(payment_status);
CREATE INDEX IF NOT EXISTS idx_bookings_travel_date ON bookings(travel_date);
CREATE INDEX IF NOT EXISTS idx_bookings_booking_date ON bookings(booking_date);
-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\docker-compose.yml]
[–†–∞–∑–º–µ—Ä: 2403 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-21 13:55:05.045075]

version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: tourism_postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tourism_network

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: tourism_auth_service
    environment:
      # —Å–µ–∫—Ä–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —É –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤, –∫—Ç–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω—ã
      SECRET_KEY: "tourism-platform-secret-key-2024-production-ready"
      JWT_ALGORITHM: "HS256"
      ACCESS_TOKEN_EXPIRE_MINUTES: "30"
      # –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ç–∏ compose –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö–æ—Å—Ç postgres
      DATABASE_URL: "postgresql://admin:password@postgres:5432/auth_db"
    ports:
      - "8000:8000"
    depends_on:
      - postgres
    networks:
      - tourism_network

  tours-service:
    build:
      context: ./tours-service
      dockerfile: Dockerfile
    container_name: tourism_tours_service
    environment:
      DATABASE_URL: "postgresql://admin:password@postgres:5432/tours_db"
      SECRET_KEY: "tourism-platform-secret-key-2024-production-ready"
      JWT_ALGORITHM: "HS256"
    ports:
      - "8001:8001"
    depends_on:
      - postgres
    networks:
      - tourism_network

  booking-service:
    build:
      context: ./booking-service
      dockerfile: Dockerfile
    container_name: tourism_booking_service
    environment:
      DATABASE_URL: "postgresql://admin:password@postgres:5432/booking_db"
      SECRET_KEY: "tourism-platform-secret-key-2024-production-ready"
      JWT_ALGORITHM: "HS256"
      AUTH_SERVICE_URL: "http://auth-service:8000"
      TOURS_SERVICE_URL: "http://tours-service:8001"
    ports:
      - "8002:8002"
    depends_on:
      - postgres
      - auth-service
      - tours-service
    networks:
      - tourism_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tourism_frontend
    ports:
      - "8080:80"
    depends_on:
      - auth-service
      - tours-service
      - booking-service
    networks:
      - tourism_network

volumes:
  postgres_data:

networks:
  tourism_network:
    driver: bridge
-----

[–§–∞–π–ª: C:\Users\–¢–∏—Ö–æ–Ω\Desktop\tourism-platform\docker-stack.yml]
[–†–∞–∑–º–µ—Ä: 5444 –±–∞–π—Ç]
[–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: 2025-10-27 07:59:11.628950]

version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tourism_network
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
        delay: 15s
        max_attempts: 3
        window: 300s
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: pause
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  auth-service:
    image: tourism-platform-auth-service:latest
    environment:
      SECRET_KEY: "tourism-platform-secret-key-2024-production-ready"
      JWT_ALGORITHM: "HS256"
      ACCESS_TOKEN_EXPIRE_MINUTES: "30"
      DATABASE_URL: "postgresql://admin:password@postgres:5432/auth_db"
      HEALTH_CHECK_HOST: "localhost"
    ports:
      - "8000:8000"
    networks:
      - tourism_network
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
        delay: 15s
        max_attempts: 3
        window: 300s
      update_config:
        parallelism: 1
        delay: 20s
        failure_action: rollback
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: pause
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  tours-service:
    image: tourism-platform-tours-service:latest
    environment:
      DATABASE_URL: "postgresql://admin:password@postgres:5432/tours_db"
      SECRET_KEY: "tourism-platform-secret-key-2024-production-ready"
      JWT_ALGORITHM: "HS256"
      HEALTH_CHECK_HOST: "localhost"
    ports:
      - "8001:8001"
    networks:
      - tourism_network
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
        delay: 15s
        max_attempts: 3
        window: 300s
      update_config:
        parallelism: 1
        delay: 20s
        failure_action: rollback
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: pause
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  booking-service:
    image: tourism-platform-booking-service:latest
    environment:
      DATABASE_URL: "postgresql://admin:password@postgres:5432/booking_db"
      SECRET_KEY: "tourism-platform-secret-key-2024-production-ready"
      JWT_ALGORITHM: "HS256"
      AUTH_SERVICE_URL: "http://auth-service:8000"
      TOURS_SERVICE_URL: "http://tours-service:8001"
      HEALTH_CHECK_HOST: "localhost"
    ports:
      - "8002:8002"
    networks:
      - tourism_network
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 20s
        max_attempts: 3
        window: 300s
      update_config:
        parallelism: 1
        delay: 25s
        failure_action: rollback
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: pause
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

  frontend:
    image: tourism-platform-frontend:latest
    ports:
      - "8080:80"
    networks:
      - tourism_network
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 300s
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 5s
        failure_action: pause
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local

networks:
  tourism_network:
    driver: overlay
-----

